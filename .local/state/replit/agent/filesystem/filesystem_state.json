{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# VendingPro Dashboard\n\n## Overview\n\nVendingPro is a comprehensive vending machine management system that provides real-time monitoring, inventory control, order tracking, and maintenance management for a network of vending machines. The application features a modern, responsive dashboard built with React and TypeScript on the frontend, with an Express.js backend and PostgreSQL database for data persistence.\n\nThe system enables operators to:\n- Secure user authentication with login, registration, and password management\n- Password reset functionality for customers directly in their dashboard\n- Role-based access control (admin and customer roles)\n- Real-time notifications system with dedicated notifications page\n- Monitor successfully delivered orders with card/list view toggle (admin only)\n- Manage product inventory and pricing (admin only)\n- Track sales orders and transactions (role-specific views)\n- Track order status with dedicated order tracking page\n- Schedule and track deliveries to machines (admin only)\n- Manage assembly tasks for new machines (admin only)\n- Schedule and track maintenance activities (admin only)\n- Customer-specific dashboard showing personal order statistics\n- Dynamic order count badges in navigation (total for admin, personal for customers)\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n### Product Page Display Fixes (Latest - Oct 8, 2025)\n- **Product Count Display**: Added dynamic product count showing \"Showing X of Y products\"\n  - Shows filtered count vs total count\n  - Updates in real-time when filters are applied\n  - Located between filters and product grid for better visibility\n- **Sidebar Product Badge**: Fixed product count badge in navigation sidebar\n  - Now shows actual product count (23) instead of hardcoded value\n  - Fetches product data dynamically for admin users\n  - Updates automatically when products are added/removed\n- **Product Specifications Display**: Fixed specifications not appearing on product cards\n  - Corrected field name mappings to match database schema (capitalized names)\n  - Specifications now display: Dimensions, Capacity, Power Consumption, and Weight\n  - All 23 products now show complete specification data on product cards\n- **Database Seeding**: Comprehensive product data with complete specifications\n  - 23 products across 3 categories (Beverages: 11, Snacks: 8, Healthy Options: 4)\n  - All products have proper JSON specifications with all required fields\n  - Fixed admin account credentials: admin@vendingpro.com / admin123\n\n### Product Redirect System & UI Improvements (Oct 8, 2025)\n- **Global Product Redirect**: Any page can now accept `product_id` or `product` query parameters and automatically redirect users to checkout\n  - Authenticated users: redirect to `/checkout?product_id=xxx` directly\n  - Non-authenticated users: redirect to `/auth?product_id=xxx`, then to checkout after login/register\n  - Implemented in Layout component with useEffect for pages other than /auth and /checkout\n- **Auth Flow Enhancement**: Fixed login/register redirect to preserve product query parameters\n  - Uses `useMemo` to capture redirect URL once on mount, preventing loss during re-renders\n  - Redirect logic moved to `useEffect` to avoid React setState-during-render warnings\n  - Supports both `product_id` and `product` parameter names for external compatibility\n- **Product Form Scroll**: Added vertical scroll to product add/edit dialog\n  - Dialog constrained to 90vh height with scrollable content\n  - Prevents form from extending beyond viewport on long specifications\n- **Dashboard Layout Fix**: Improved layout structure for better UX\n  - Header remains sticky at top (`position: sticky`)\n  - Content area scrolls independently (`overflow-y-auto`)\n  - Main container uses flexbox column with no overflow for clean layout\n\n### Order Placement & Payment System\n- Added checkout page (`/checkout?product=<id>`) for external product purchases\n- Implemented comprehensive order form with:\n  - Contact information (name, email, phone)\n  - Shipping address fields\n  - Billing address (with \"same as shipping\" option)\n  - Payment method selection (Bank Transfer, CashApp, Venmo, Western Union)\n  - Optional payment transfer details (amount, transfer ID, transfer date)\n  - Additional notes field\n- Authentication-aware: redirects to login if user not authenticated\n- Backend checkout endpoint (`POST /api/checkout`) creates order and order items\n- Payment information displayed in admin orders table (Payment method, Transfer ID columns)\n- Order status automatically set to \"paid\" if transfer ID provided, otherwise \"pending\"\n- Customers can place orders without payment details and add them later\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized production builds\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Styling**: Tailwind CSS with custom design system (neutral base color, CSS variables for theming)\n- **State Management**: TanStack Query (React Query) for server state\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n**Design Decisions:**\n- Component-based architecture with feature-based organization (dashboard, products, orders, order tracking, monitoring, deliveries, assembly, maintenance)\n- Glass-morphism design aesthetic with gradient accents\n- Responsive design supporting mobile, tablet, and desktop viewports\n- Shared UI components in `/client/src/components/ui` following shadcn/ui patterns\n- Path aliases configured (`@/` for client src, `@shared/` for shared code)\n- Role-based navigation filtering in Layout component with dynamic badge counts\n- Protected routes with role-based access control\n- Card/list view toggle pattern for data visualization\n\n### Backend Architecture\n\n**Technology Stack:**\n- **Runtime**: Node.js with TypeScript\n- **Framework**: Express.js for REST API\n- **Authentication**: Passport.js with passport-local strategy\n- **Session Management**: express-session with connect-pg-simple (PostgreSQL store)\n- **Password Hashing**: Node.js scrypt for secure password storage\n- **Database ORM**: Drizzle ORM with Neon serverless PostgreSQL\n- **Validation**: Zod schemas shared between client and server\n- **Development**: tsx for TypeScript execution in development\n\n**API Structure:**\n- RESTful endpoints organized by resource type\n- Routes defined in `/server/routes.ts`\n- Authentication routes: `/api/login`, `/api/register`, `/api/logout`, `/api/user`\n- Password management: `/api/reset-password` with Zod validation\n- Notifications endpoints: `/api/notifications` with CRUD operations\n- Role-based authorization middleware for protected endpoints\n- Storage layer abstraction in `/server/storage.ts` for database operations\n- Centralized error handling and request/response logging middleware\n- JSON body parsing with raw body preservation for webhook integrations\n\n**Key Design Patterns:**\n- Repository pattern via IStorage interface for data access\n- Schema-first design with Drizzle schemas in `/shared/schema.ts`\n- Shared validation schemas between frontend and backend using Zod\n- Type-safe database operations with Drizzle ORM\n\n### Data Storage\n\n**Database**: PostgreSQL (via Neon serverless)\n\n**Schema Design:**\n- **users**: Authentication and user management with role-based access (admin/customer), email, password hash, created_at\n- **products**: Product catalog with categories, pricing, stock levels\n- **machines**: Vending machine inventory with location, status, and performance metrics\n- **orders**: Transaction records with user_id foreign key, order items relationship\n- **order_items**: Line items for each order\n- **deliveries**: Delivery scheduling and tracking to machines\n- **assemblies**: Assembly task management for machine setup\n- **maintenance_records**: Maintenance scheduling and history\n\n**Schema Features:**\n- UUID primary keys generated at database level\n- Timestamp tracking (created_at, updated_at)\n- JSONB fields for flexible data (customer_info, components, items)\n- Status enums for workflow management\n- Decimal precision for monetary values\n\n### External Dependencies\n\n**Database Services:**\n- **Neon Serverless PostgreSQL**: Primary database with WebSocket support for serverless environments\n- **Drizzle Kit**: Database migrations and schema management\n\n**UI Component Libraries:**\n- **Radix UI**: Unstyled, accessible component primitives (accordion, alert-dialog, avatar, checkbox, dialog, dropdown-menu, etc.)\n- **shadcn/ui**: Pre-built component implementations on top of Radix UI\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n\n**Development Tools:**\n- **Replit Plugins**: Runtime error modal, cartographer, and dev banner for Replit environment\n- **Vite**: Build tool and dev server with HMR support\n\n**Validation & Forms:**\n- **Zod**: Schema validation for forms and API requests\n- **React Hook Form**: Form state management with Zod resolver integration\n- **@hookform/resolvers**: Bridge between React Hook Form and Zod\n\n**Data Fetching:**\n- **TanStack Query**: Server state management with automatic caching and refetching\n- Custom fetch wrapper with credential handling and error management\n\n**Utilities:**\n- **date-fns**: Date manipulation and formatting\n- **clsx & tailwind-merge**: Conditional className composition\n- **class-variance-authority**: Type-safe variant styling\n- **embla-carousel**: Carousel/slider functionality\n- **cmdk**: Command menu/palette implementation\n\n### Authentication & Authorization\n\n**Authentication System:**\n- Session-based authentication using Passport.js with local strategy\n- Secure password storage with scrypt hashing\n- Sessions stored in PostgreSQL using connect-pg-simple\n- Protected routes using custom ProtectedRoute component\n- Auth context provider (useAuth hook) for application-wide auth state\n\n**Role-Based Access Control (RBAC):**\n- Two roles: `admin` and `customer`\n- Frontend route protection with `allowedRoles` parameter in ProtectedRoute\n- Backend authorization filtering orders by user role\n- Navigation menu filtered based on user role\n\n**Role Permissions:**\n- **Admin**: Full access to all features (dashboard, products, categories, orders, monitoring with delivered orders view, deliveries, assembly, maintenance, settings, help, notifications)\n- **Customer**: Limited access (dashboard with personal stats and password reset, orders with personal order count, order tracking, notifications, help)\n- **Settings page**: Restricted to admin users only due to sensitive system options\n- **Monitoring page**: Displays successfully delivered orders in card/list view (admin only)\n\n**Security Features:**\n- Backend order filtering ensures customers only see their own orders\n- Role-based route guards prevent unauthorized access to admin pages\n- Automatic redirect to dashboard for unauthorized route access\n- Session management with secure cookie settings\n- Password reset functionality with current password verification and Zod validation\n- Secure password hashing using scrypt before storage","size_bytes":11239},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport cors from \"cors\";\n\nconst app = express();\n\ndeclare module \"http\" {\n  interface IncomingMessage {\n    rawBody: unknown;\n  }\n}\n\n// CORS - Allow requests from anywhere (development only)\napp.use(cors());\n\napp.use(\n  express.json({\n    verify: (req, _res, buf) => {\n      req.rawBody = buf;\n    },\n  }),\n);\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  server.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    },\n    () => {\n      log(`serving on port ${port}`);\n    },\n  );\n})();\n","size_bytes":2352},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { \n  insertCategorySchema,\n  insertSubcategorySchema,\n  insertProductSchema, \n  insertOrderSchema,\n  insertDeliverySchema,\n  insertAssemblySchema,\n  insertMaintenanceRecordSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication (creates /api/register, /api/login, /api/logout, /api/user, /api/forgot-password)\n  setupAuth(app);\n\n  // Reset password endpoint\n  app.post(\"/api/reset-password\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const resetPasswordSchema = z.object({\n        currentPassword: z.string().min(1, \"Current password is required\"),\n        newPassword: z.string().min(6, \"New password must be at least 6 characters\"),\n      });\n\n      const validation = resetPasswordSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid input\", \n          errors: validation.error.errors \n        });\n      }\n\n      const { currentPassword, newPassword } = validation.data;\n\n      const { hashPassword, comparePasswords } = await import(\"./auth\");\n      const dbUser = await storage.getUserByUsername(user.username);\n      \n      if (!dbUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // comparePasswords(plain, hash) - correct order\n      const isValid = await comparePasswords(currentPassword, dbUser.password);\n      if (!isValid) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      const hashedPassword = await hashPassword(newPassword);\n      await storage.updateUser(user.id, { password: hashedPassword });\n\n      res.json({ message: \"Password reset successfully\" });\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  // Notifications endpoints\n  app.get(\"/api/notifications\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Mock notifications for now\n      const notifications = [\n        {\n          id: \"1\",\n          title: \"Order Confirmed\",\n          message: \"Your order #ORD-001 has been confirmed\",\n          type: \"success\",\n          read: false,\n          created_at: new Date().toISOString(),\n        },\n        {\n          id: \"2\",\n          title: \"New Product Available\",\n          message: \"Check out our new products in the catalog\",\n          type: \"info\",\n          read: true,\n          created_at: new Date(Date.now() - 86400000).toISOString(),\n        },\n      ];\n\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.delete(\"/api/notifications/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete notification\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/mark-all-read\", async (req, res) => {\n    try {\n      res.json({ message: \"All notifications marked as read\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.getProductById(id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create product\" });\n      }\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.updateProduct(id, productData);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update product\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteProduct(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Categories routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid category data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create category\" });\n      }\n    }\n  });\n\n  app.put(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.updateCategory(id, categoryData);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid category data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update category\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteCategory(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Subcategories routes\n  app.get(\"/api/subcategories\", async (req, res) => {\n    try {\n      const categoryId = req.query.categoryId as string | undefined;\n      const subcategories = categoryId \n        ? await storage.getSubcategoriesByCategoryId(categoryId)\n        : await storage.getAllSubcategories();\n      res.json(subcategories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch subcategories\" });\n    }\n  });\n\n  app.post(\"/api/subcategories\", async (req, res) => {\n    try {\n      const subcategoryData = insertSubcategorySchema.parse(req.body);\n      const subcategory = await storage.createSubcategory(subcategoryData);\n      res.status(201).json(subcategory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid subcategory data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create subcategory\" });\n      }\n    }\n  });\n\n  app.put(\"/api/subcategories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const subcategoryData = insertSubcategorySchema.parse(req.body);\n      const subcategory = await storage.updateSubcategory(id, subcategoryData);\n      if (!subcategory) {\n        return res.status(404).json({ message: \"Subcategory not found\" });\n      }\n      res.json(subcategory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid subcategory data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update subcategory\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/subcategories/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSubcategory(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete subcategory\" });\n    }\n  });\n\n  // Orders routes\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      \n      // If customer, only return their own orders\n      if (user && user.role === \"customer\") {\n        const allOrders = await storage.getAllOrders(limit);\n        const userOrders = allOrders.filter(order => order.user_id === user.id);\n        res.json(userOrders);\n      } else {\n        // Admin sees all orders\n        const orders = await storage.getAllOrders(limit);\n        res.json(orders);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const order = await storage.getOrderById(id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const orderData = insertOrderSchema.parse(req.body);\n      const order = await storage.createOrder(orderData);\n      res.status(201).json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create order\" });\n      }\n    }\n  });\n\n  app.put(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const orderData = insertOrderSchema.parse(req.body);\n      const order = await storage.updateOrder(id, orderData);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update order\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/orders/:id/status\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!status) {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n\n      const validStatuses = [\"pending\", \"paid\", \"processing\", \"completed\", \"failed\", \"cancelled\"];\n      if (!validStatuses.includes(status)) {\n        return res.status(400).json({ message: \"Invalid status value\" });\n      }\n\n      const order = await storage.updateOrderStatus(id, status);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  // Checkout endpoint\n  app.post(\"/api/checkout\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { product_id, quantity, total_amount, payment_method, payment_amount, payment_transfer_id, payment_transfer_date, customer_info } = req.body;\n\n      if (!product_id || !quantity || !total_amount) {\n        return res.status(400).json({ message: \"Product ID, quantity, and total amount are required\" });\n      }\n\n      // Get product to verify it exists\n      const product = await storage.getProductById(product_id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      // Generate order number\n      const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n\n      // Create order\n      const orderData = {\n        order_number: orderNumber,\n        user_id: user.id,\n        total_amount: total_amount.toString(),\n        items_count: quantity,\n        status: payment_transfer_id ? \"paid\" : \"pending\",\n        payment_method: payment_method || null,\n        payment_amount: payment_amount ? payment_amount.toString() : null,\n        payment_transfer_id: payment_transfer_id || null,\n        payment_transfer_date: payment_transfer_date ? new Date(payment_transfer_date) : null,\n        customer_info: customer_info || null,\n      };\n\n      const order = await storage.createOrder(orderData);\n\n      // Create order item\n      const orderItemData = {\n        order_id: order.id,\n        product_id: product_id,\n        quantity: quantity,\n        price: product.price,\n      };\n\n      await storage.createOrderItem(orderItemData);\n\n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Checkout error:\", error);\n      res.status(500).json({ message: \"Failed to process checkout\" });\n    }\n  });\n\n  // Deliveries routes\n  app.get(\"/api/deliveries\", async (req, res) => {\n    try {\n      const deliveries = await storage.getAllDeliveries();\n      res.json(deliveries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch deliveries\" });\n    }\n  });\n\n  app.post(\"/api/deliveries\", async (req, res) => {\n    try {\n      const deliveryData = insertDeliverySchema.parse(req.body);\n      const delivery = await storage.createDelivery(deliveryData);\n      res.status(201).json(delivery);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid delivery data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create delivery\" });\n      }\n    }\n  });\n\n  app.put(\"/api/deliveries/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deliveryData = insertDeliverySchema.parse(req.body);\n      const delivery = await storage.updateDelivery(id, deliveryData);\n      if (!delivery) {\n        return res.status(404).json({ message: \"Delivery not found\" });\n      }\n      res.json(delivery);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid delivery data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update delivery\" });\n      }\n    }\n  });\n\n  // Assemblies routes\n  app.get(\"/api/assemblies\", async (req, res) => {\n    try {\n      const assemblies = await storage.getAllAssemblies();\n      res.json(assemblies);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch assemblies\" });\n    }\n  });\n\n  app.post(\"/api/assemblies\", async (req, res) => {\n    try {\n      const assemblyData = insertAssemblySchema.parse(req.body);\n      const assembly = await storage.createAssembly(assemblyData);\n      res.status(201).json(assembly);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid assembly data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create assembly\" });\n      }\n    }\n  });\n\n  app.put(\"/api/assemblies/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const assemblyData = insertAssemblySchema.parse(req.body);\n      const assembly = await storage.updateAssembly(id, assemblyData);\n      if (!assembly) {\n        return res.status(404).json({ message: \"Assembly not found\" });\n      }\n      res.json(assembly);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid assembly data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update assembly\" });\n      }\n    }\n  });\n\n  // Helper to create API schema for maintenance records that accepts date strings\n  const createMaintenanceApiSchema = () => {\n    return insertMaintenanceRecordSchema.extend({\n      scheduled_date: z.union([\n        z.date(),\n        z.string().refine((val) => !isNaN(new Date(val).getTime()), {\n          message: \"Invalid date string\"\n        }).transform(val => new Date(val))\n      ]),\n      completed_date: z.union([\n        z.date(),\n        z.string().refine((val) => !isNaN(new Date(val).getTime()), {\n          message: \"Invalid date string\"\n        }).transform(val => new Date(val)),\n        z.null()\n      ]).optional(),\n    });\n  };\n\n  // Maintenance records routes\n  app.get(\"/api/maintenance\", async (req, res) => {\n    try {\n      const records = await storage.getAllMaintenanceRecords();\n      res.json(records);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch maintenance records\" });\n    }\n  });\n\n  app.post(\"/api/maintenance\", async (req, res) => {\n    try {\n      const apiSchema = createMaintenanceApiSchema();\n      const recordData = apiSchema.parse(req.body);\n      const record = await storage.createMaintenanceRecord(recordData);\n      res.status(201).json(record);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid maintenance record data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create maintenance record\" });\n      }\n    }\n  });\n\n  app.put(\"/api/maintenance/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const apiSchema = createMaintenanceApiSchema();\n      const recordData = apiSchema.parse(req.body);\n      const record = await storage.updateMaintenanceRecord(id, recordData);\n      if (!record) {\n        return res.status(404).json({ message: \"Maintenance record not found\" });\n      }\n      res.json(record);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid maintenance record data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update maintenance record\" });\n      }\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Monitoring - Delivered products with customer details\n  app.get(\"/api/monitoring/delivered\", async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const deliveredOrders = await storage.getDeliveredOrdersWithDetails();\n      res.json(deliveredOrders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch delivered orders\" });\n    }\n  });\n\n  // Categories with subcategories endpoint\n  app.get(\"/api/categories-with-subcategories\", async (req, res) => {\n    try {\n      const categoriesWithSubs = await storage.getCategoriesWithSubcategories();\n      res.json(categoriesWithSubs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories with subcategories\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":20722},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { products, machines, orders, deliveries, assemblies, maintenance_records } from \"@shared/schema\";\n\nasync function seed() {\n  console.log(\"🌱 Starting database seed...\");\n\n  // Seed Products\n  console.log(\"Adding products...\");\n  const productRecords = await db.insert(products).values([\n    {\n      name: \"Classic Coca-Cola\",\n      category: \"Beverages\",\n      price: \"2.50\",\n      description: \"Refreshing cola drink\",\n      stock: 120,\n      weight: \"355ml\",\n      status: \"active\",\n    },\n    {\n      name: \"Pepsi\",\n      category: \"Beverages\",\n      price: \"2.50\",\n      description: \"Bold cola taste\",\n      stock: 95,\n      weight: \"355ml\",\n      status: \"active\",\n    },\n    {\n      name: \"Sprite\",\n      category: \"Beverages\",\n      price: \"2.50\",\n      description: \"Lemon-lime soda\",\n      stock: 80,\n      weight: \"355ml\",\n      status: \"active\",\n    },\n    {\n      name: \"Bottled Water\",\n      category: \"Beverages\",\n      price: \"1.50\",\n      description: \"Pure drinking water\",\n      stock: 150,\n      weight: \"500ml\",\n      status: \"active\",\n    },\n    {\n      name: \"Snickers Bar\",\n      category: \"Snacks\",\n      price: \"1.75\",\n      description: \"Chocolate bar with peanuts\",\n      stock: 60,\n      weight: \"52g\",\n      status: \"active\",\n    },\n    {\n      name: \"Lay's Classic Chips\",\n      category: \"Snacks\",\n      price: \"2.00\",\n      description: \"Classic salted potato chips\",\n      stock: 45,\n      weight: \"40g\",\n      status: \"active\",\n    },\n    {\n      name: \"Kit Kat\",\n      category: \"Snacks\",\n      price: \"1.75\",\n      description: \"Crispy wafer chocolate bar\",\n      stock: 70,\n      weight: \"45g\",\n      status: \"active\",\n    },\n    {\n      name: \"Doritos Nacho Cheese\",\n      category: \"Snacks\",\n      price: \"2.25\",\n      description: \"Cheesy tortilla chips\",\n      stock: 35,\n      weight: \"40g\",\n      status: \"active\",\n    },\n    {\n      name: \"Red Bull Energy Drink\",\n      category: \"Beverages\",\n      price: \"3.50\",\n      description: \"Energy drink\",\n      stock: 25,\n      weight: \"250ml\",\n      status: \"active\",\n    },\n    {\n      name: \"Gatorade\",\n      category: \"Beverages\",\n      price: \"2.75\",\n      description: \"Sports drink\",\n      stock: 40,\n      weight: \"500ml\",\n      status: \"active\",\n    },\n  ]).returning();\n  console.log(`✓ Added ${productRecords.length} products`);\n\n  // Seed Machines\n  console.log(\"Adding machines...\");\n  const machineRecords = await db.insert(machines).values([\n    {\n      name: \"VM-001\",\n      location: \"Main Office Lobby\",\n      status: \"online\",\n      stock_level: 75,\n      daily_sales: \"245.50\",\n      total_transactions: 98,\n      last_maintenance: new Date(\"2025-09-15\"),\n      next_maintenance: new Date(\"2025-11-15\"),\n    },\n    {\n      name: \"VM-002\",\n      location: \"Factory Floor A\",\n      status: \"online\",\n      stock_level: 60,\n      daily_sales: \"189.25\",\n      total_transactions: 76,\n      last_maintenance: new Date(\"2025-09-20\"),\n      next_maintenance: new Date(\"2025-11-20\"),\n    },\n    {\n      name: \"VM-003\",\n      location: \"Break Room B\",\n      status: \"maintenance\",\n      stock_level: 20,\n      daily_sales: \"45.00\",\n      total_transactions: 18,\n      last_maintenance: new Date(\"2025-08-30\"),\n      next_maintenance: new Date(\"2025-10-30\"),\n    },\n    {\n      name: \"VM-004\",\n      location: \"Cafeteria\",\n      status: \"online\",\n      stock_level: 85,\n      daily_sales: \"312.75\",\n      total_transactions: 125,\n      last_maintenance: new Date(\"2025-09-25\"),\n      next_maintenance: new Date(\"2025-11-25\"),\n    },\n    {\n      name: \"VM-005\",\n      location: \"Gym Entrance\",\n      status: \"online\",\n      stock_level: 55,\n      daily_sales: \"178.50\",\n      total_transactions: 71,\n      last_maintenance: new Date(\"2025-09-10\"),\n      next_maintenance: new Date(\"2025-11-10\"),\n    },\n  ]).returning();\n  console.log(`✓ Added ${machineRecords.length} machines`);\n\n  // Seed Orders\n  console.log(\"Adding orders...\");\n  const orderRecords = await db.insert(orders).values([\n    {\n      order_number: \"ORD-2025-001\",\n      machine_id: machineRecords[0].id,\n      total_amount: \"5.00\",\n      items_count: 2,\n      status: \"completed\",\n      payment_method: \"credit_card\",\n      customer_info: { name: \"John Smith\" },\n      created_at: new Date(\"2025-10-06T08:30:00\"),\n    },\n    {\n      order_number: \"ORD-2025-002\",\n      machine_id: machineRecords[1].id,\n      total_amount: \"3.50\",\n      items_count: 1,\n      status: \"completed\",\n      payment_method: \"cash\",\n      customer_info: { name: \"Jane Doe\" },\n      created_at: new Date(\"2025-10-06T09:15:00\"),\n    },\n    {\n      order_number: \"ORD-2025-003\",\n      machine_id: machineRecords[3].id,\n      total_amount: \"7.25\",\n      items_count: 3,\n      status: \"completed\",\n      payment_method: \"mobile\",\n      customer_info: { name: \"Bob Johnson\" },\n      created_at: new Date(\"2025-10-06T10:00:00\"),\n    },\n    {\n      order_number: \"ORD-2025-004\",\n      machine_id: machineRecords[0].id,\n      total_amount: \"2.50\",\n      items_count: 1,\n      status: \"paid\",\n      payment_method: \"credit_card\",\n      customer_info: { name: \"Alice Williams\" },\n      created_at: new Date(\"2025-10-06T11:30:00\"),\n    },\n    {\n      order_number: \"ORD-2025-005\",\n      machine_id: machineRecords[4].id,\n      total_amount: \"4.25\",\n      items_count: 2,\n      status: \"processing\",\n      payment_method: \"debit_card\",\n      customer_info: { name: \"Mike Brown\" },\n      created_at: new Date(\"2025-10-06T12:00:00\"),\n    },\n    {\n      order_number: \"ORD-2025-006\",\n      machine_id: machineRecords[1].id,\n      total_amount: \"6.00\",\n      items_count: 3,\n      status: \"pending\",\n      payment_method: \"mobile\",\n      customer_info: { name: \"Sarah Davis\" },\n      created_at: new Date(\"2025-10-06T13:00:00\"),\n    },\n  ]).returning();\n  console.log(`✓ Added ${orderRecords.length} orders`);\n\n  // Seed Deliveries\n  console.log(\"Adding deliveries...\");\n  const deliveryRecords = await db.insert(deliveries).values([\n    {\n      delivery_number: \"DEL-2025-001\",\n      machine_id: machineRecords[0].id,\n      status: \"delivered\",\n      delivery_date: new Date(\"2025-10-05\"),\n      items: [\n        { product: \"Coca-Cola\", quantity: 24 },\n        { product: \"Snickers\", quantity: 12 },\n      ],\n      notes: \"Delivered on time\",\n      driver_name: \"Tom Wilson\",\n      tracking_info: { signature: \"Received by manager\" },\n    },\n    {\n      delivery_number: \"DEL-2025-002\",\n      machine_id: machineRecords[1].id,\n      status: \"in_transit\",\n      delivery_date: new Date(\"2025-10-07\"),\n      items: [\n        { product: \"Pepsi\", quantity: 20 },\n        { product: \"Chips\", quantity: 15 },\n      ],\n      notes: \"Expected delivery tomorrow\",\n      driver_name: \"Emma Clark\",\n      tracking_info: { location: \"En route to Factory Floor A\" },\n    },\n    {\n      delivery_number: \"DEL-2025-003\",\n      machine_id: machineRecords[3].id,\n      status: \"pending\",\n      delivery_date: new Date(\"2025-10-08\"),\n      items: [\n        { product: \"Water\", quantity: 30 },\n        { product: \"Gatorade\", quantity: 18 },\n      ],\n      notes: \"Scheduled for Monday\",\n      driver_name: \"David Martinez\",\n      tracking_info: { warehouse: \"Pending dispatch\" },\n    },\n  ]).returning();\n  console.log(`✓ Added ${deliveryRecords.length} deliveries`);\n\n  // Seed Assemblies\n  console.log(\"Adding assemblies...\");\n  const assemblyRecords = await db.insert(assemblies).values([\n    {\n      name: \"New Vending Machine Assembly\",\n      type: \"full_machine\",\n      components: [\n        { name: \"Display Panel\", quantity: 1 },\n        { name: \"Payment Module\", quantity: 1 },\n        { name: \"Product Dispensers\", quantity: 12 },\n        { name: \"Cooling Unit\", quantity: 1 },\n      ],\n      status: \"in_progress\",\n      priority: \"high\",\n      assigned_to: \"Tech Team A\",\n      estimated_time: 480,\n      notes: \"For new location opening next week\",\n    },\n    {\n      name: \"Replacement Payment System\",\n      type: \"component\",\n      components: [\n        { name: \"Card Reader\", quantity: 1 },\n        { name: \"Bill Acceptor\", quantity: 1 },\n        { name: \"Coin Mechanism\", quantity: 1 },\n      ],\n      status: \"completed\",\n      priority: \"urgent\",\n      assigned_to: \"Tech Team B\",\n      estimated_time: 120,\n      notes: \"Completed for VM-003\",\n    },\n    {\n      name: \"Maintenance Kit Assembly\",\n      type: \"kit\",\n      components: [\n        { name: \"Filters\", quantity: 5 },\n        { name: \"Belts\", quantity: 3 },\n        { name: \"Sensors\", quantity: 4 },\n      ],\n      status: \"pending\",\n      priority: \"normal\",\n      assigned_to: \"Tech Team A\",\n      estimated_time: 90,\n      notes: \"Prepare for monthly maintenance\",\n    },\n  ]).returning();\n  console.log(`✓ Added ${assemblyRecords.length} assemblies`);\n\n  // Seed Maintenance Records\n  console.log(\"Adding maintenance records...\");\n  const maintenanceRecordsData = await db.insert(maintenance_records).values([\n    {\n      machine_id: machineRecords[0].id,\n      type: \"routine\",\n      priority: \"normal\",\n      status: \"completed\",\n      scheduled_date: new Date(\"2025-09-15\"),\n      completed_date: new Date(\"2025-09-15\"),\n      technician: \"John Tech\",\n      description: \"Regular maintenance check\",\n      notes: \"All systems normal\",\n      cost: \"125.00\",\n    },\n    {\n      machine_id: machineRecords[2].id,\n      type: \"repair\",\n      priority: \"high\",\n      status: \"in_progress\",\n      scheduled_date: new Date(\"2025-10-06\"),\n      technician: \"Sarah Mechanic\",\n      description: \"Payment system malfunction\",\n      notes: \"Replacing card reader module\",\n      cost: \"350.00\",\n    },\n    {\n      machine_id: machineRecords[1].id,\n      type: \"inspection\",\n      priority: \"normal\",\n      status: \"scheduled\",\n      scheduled_date: new Date(\"2025-10-10\"),\n      technician: \"Mike Inspector\",\n      description: \"Monthly safety inspection\",\n      notes: \"Standard compliance check\",\n      cost: \"75.00\",\n    },\n    {\n      machine_id: machineRecords[3].id,\n      type: \"cleaning\",\n      priority: \"low\",\n      status: \"scheduled\",\n      scheduled_date: new Date(\"2025-10-12\"),\n      technician: \"Cleaning Crew\",\n      description: \"Deep cleaning and sanitization\",\n      notes: \"High traffic area requires thorough cleaning\",\n      cost: \"100.00\",\n    },\n  ]).returning();\n  console.log(`✓ Added ${maintenanceRecordsData.length} maintenance records`);\n\n  console.log(\"✅ Database seeding completed successfully!\");\n  console.log(`\n  Summary:\n  - ${productRecords.length} products\n  - ${machineRecords.length} machines\n  - ${orderRecords.length} orders\n  - ${deliveryRecords.length} deliveries\n  - ${assemblyRecords.length} assemblies\n  - ${maintenanceRecordsData.length} maintenance records\n  `);\n}\n\nseed()\n  .catch((error) => {\n    console.error(\"❌ Seeding failed:\", error);\n    process.exit(1);\n  })\n  .then(() => {\n    console.log(\"👋 Seeding process finished\");\n    process.exit(0);\n  });\n","size_bytes":10947},"server/storage.ts":{"content":"import { \n  users,\n  categories,\n  subcategories,\n  products,\n  orders,\n  order_items,\n  deliveries,\n  assemblies,\n  maintenance_records,\n  type Category,\n  type InsertCategory,\n  type Subcategory,\n  type InsertSubcategory,\n  type Product, \n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type Delivery,\n  type InsertDelivery,\n  type Assembly,\n  type InsertAssembly,\n  type MaintenanceRecord,\n  type InsertMaintenanceRecord,\n  type User,\n  type InsertUser\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nexport interface IStorage {\n  // Session store\n  sessionStore: session.Store;\n\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Category methods\n  getAllCategories(): Promise<Category[]>;\n  getCategoryById(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: InsertCategory): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<void>;\n  getCategoriesWithSubcategories(): Promise<any[]>;\n\n  // Subcategory methods\n  getAllSubcategories(): Promise<Subcategory[]>;\n  getSubcategoriesByCategoryId(categoryId: string): Promise<Subcategory[]>;\n  getSubcategoryById(id: string): Promise<Subcategory | undefined>;\n  createSubcategory(subcategory: InsertSubcategory): Promise<Subcategory>;\n  updateSubcategory(id: string, subcategory: InsertSubcategory): Promise<Subcategory | undefined>;\n  deleteSubcategory(id: string): Promise<void>;\n\n  // Product methods\n  getAllProducts(): Promise<Product[]>;\n  getProductById(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: InsertProduct): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<void>;\n\n  // Order methods\n  getAllOrders(limit?: number): Promise<Order[]>;\n  getOrderById(id: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, order: InsertOrder): Promise<Order | undefined>;\n  updateOrderStatus(id: string, status: string): Promise<Order | undefined>;\n  getDeliveredOrdersWithDetails(): Promise<any[]>;\n\n  // Order item methods\n  getOrderItemsByOrderId(orderId: string): Promise<OrderItem[]>;\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n\n  // Delivery methods\n  getAllDeliveries(): Promise<Delivery[]>;\n  getDeliveryById(id: string): Promise<Delivery | undefined>;\n  createDelivery(delivery: InsertDelivery): Promise<Delivery>;\n  updateDelivery(id: string, delivery: InsertDelivery): Promise<Delivery | undefined>;\n\n  // Assembly methods\n  getAllAssemblies(): Promise<Assembly[]>;\n  getAssemblyById(id: string): Promise<Assembly | undefined>;\n  createAssembly(assembly: InsertAssembly): Promise<Assembly>;\n  updateAssembly(id: string, assembly: InsertAssembly): Promise<Assembly | undefined>;\n\n  // Maintenance methods\n  getAllMaintenanceRecords(): Promise<MaintenanceRecord[]>;\n  getMaintenanceRecordById(id: string): Promise<MaintenanceRecord | undefined>;\n  createMaintenanceRecord(record: InsertMaintenanceRecord): Promise<MaintenanceRecord>;\n  updateMaintenanceRecord(id: string, record: InsertMaintenanceRecord): Promise<MaintenanceRecord | undefined>;\n\n  // Dashboard stats\n  getDashboardStats(): Promise<{\n    totalProducts: number;\n    totalOrders: number;\n    pendingOrders: number;\n    totalRevenue: number;\n  }>;\n}\n\nconst PostgresSessionStore = connectPg(session);\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, data: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(data)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  // Category methods\n  async getAllCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(categories.name);\n  }\n\n  async getCategoryById(id: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.id, id));\n    return category || undefined;\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db\n      .insert(categories)\n      .values(category)\n      .returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: string, category: InsertCategory): Promise<Category | undefined> {\n    const [updatedCategory] = await db\n      .update(categories)\n      .set(category)\n      .where(eq(categories.id, id))\n      .returning();\n    return updatedCategory || undefined;\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    await db.delete(categories).where(eq(categories.id, id));\n  }\n\n  async getCategoriesWithSubcategories(): Promise<any[]> {\n    const allCategories = await db.select().from(categories).orderBy(categories.name);\n    const allSubcategories = await db.select().from(subcategories).orderBy(subcategories.name);\n\n    return allCategories.map(category => ({\n      ...category,\n      subcategories: allSubcategories.filter(sub => sub.category_id === category.id)\n    }));\n  }\n\n  // Subcategory methods\n  async getAllSubcategories(): Promise<Subcategory[]> {\n    return await db.select().from(subcategories).orderBy(subcategories.name);\n  }\n\n  async getSubcategoriesByCategoryId(categoryId: string): Promise<Subcategory[]> {\n    return await db.select().from(subcategories).where(eq(subcategories.category_id, categoryId)).orderBy(subcategories.name);\n  }\n\n  async getSubcategoryById(id: string): Promise<Subcategory | undefined> {\n    const [subcategory] = await db.select().from(subcategories).where(eq(subcategories.id, id));\n    return subcategory || undefined;\n  }\n\n  async createSubcategory(subcategory: InsertSubcategory): Promise<Subcategory> {\n    const [newSubcategory] = await db\n      .insert(subcategories)\n      .values(subcategory)\n      .returning();\n    return newSubcategory;\n  }\n\n  async updateSubcategory(id: string, subcategory: InsertSubcategory): Promise<Subcategory | undefined> {\n    const [updatedSubcategory] = await db\n      .update(subcategories)\n      .set(subcategory)\n      .where(eq(subcategories.id, id))\n      .returning();\n    return updatedSubcategory || undefined;\n  }\n\n  async deleteSubcategory(id: string): Promise<void> {\n    await db.delete(subcategories).where(eq(subcategories.id, id));\n  }\n\n  // Product methods\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products).orderBy(products.name);\n  }\n\n  async getProductById(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db\n      .insert(products)\n      .values(product)\n      .returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: InsertProduct): Promise<Product | undefined> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set(product)\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct || undefined;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n  // Order methods\n  async getAllOrders(limit?: number): Promise<Order[]> {\n    let query = db.select().from(orders).orderBy(desc(orders.created_at));\n    \n    if (limit) {\n      query = query.limit(limit) as any;\n    }\n    \n    return await query;\n  }\n\n  async getOrderById(id: string): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order || undefined;\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db\n      .insert(orders)\n      .values(order)\n      .returning();\n    return newOrder;\n  }\n\n  async updateOrder(id: string, order: InsertOrder): Promise<Order | undefined> {\n    const [updatedOrder] = await db\n      .update(orders)\n      .set(order)\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder || undefined;\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order | undefined> {\n    const [updatedOrder] = await db\n      .update(orders)\n      .set({ status, updated_at: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder || undefined;\n  }\n\n  async getDeliveredOrdersWithDetails(): Promise<any[]> {\n    const deliveredOrders = await db\n      .select({\n        order_id: orders.id,\n        order_number: orders.order_number,\n        total_amount: orders.total_amount,\n        items_count: orders.items_count,\n        payment_method: orders.payment_method,\n        created_at: orders.created_at,\n        customer_info: orders.customer_info,\n        user_id: orders.user_id,\n        username: users.username,\n        email: users.email,\n      })\n      .from(orders)\n      .leftJoin(users, eq(orders.user_id, users.id))\n      .where(eq(orders.status, 'completed'))\n      .orderBy(desc(orders.created_at));\n\n    return deliveredOrders;\n  }\n\n  // Order item methods\n  async getOrderItemsByOrderId(orderId: string): Promise<OrderItem[]> {\n    return await db.select().from(order_items).where(eq(order_items.order_id, orderId));\n  }\n\n  async createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    const [newOrderItem] = await db\n      .insert(order_items)\n      .values(orderItem)\n      .returning();\n    return newOrderItem;\n  }\n\n  // Delivery methods\n  async getAllDeliveries(): Promise<Delivery[]> {\n    return await db.select().from(deliveries).orderBy(desc(deliveries.created_at));\n  }\n\n  async getDeliveryById(id: string): Promise<Delivery | undefined> {\n    const [delivery] = await db.select().from(deliveries).where(eq(deliveries.id, id));\n    return delivery || undefined;\n  }\n\n  async createDelivery(delivery: InsertDelivery): Promise<Delivery> {\n    const [newDelivery] = await db\n      .insert(deliveries)\n      .values(delivery)\n      .returning();\n    return newDelivery;\n  }\n\n  async updateDelivery(id: string, delivery: InsertDelivery): Promise<Delivery | undefined> {\n    const [updatedDelivery] = await db\n      .update(deliveries)\n      .set(delivery)\n      .where(eq(deliveries.id, id))\n      .returning();\n    return updatedDelivery || undefined;\n  }\n\n  // Assembly methods\n  async getAllAssemblies(): Promise<Assembly[]> {\n    return await db.select().from(assemblies).orderBy(desc(assemblies.created_at));\n  }\n\n  async getAssemblyById(id: string): Promise<Assembly | undefined> {\n    const [assembly] = await db.select().from(assemblies).where(eq(assemblies.id, id));\n    return assembly || undefined;\n  }\n\n  async createAssembly(assembly: InsertAssembly): Promise<Assembly> {\n    const [newAssembly] = await db\n      .insert(assemblies)\n      .values(assembly)\n      .returning();\n    return newAssembly;\n  }\n\n  async updateAssembly(id: string, assembly: InsertAssembly): Promise<Assembly | undefined> {\n    const [updatedAssembly] = await db\n      .update(assemblies)\n      .set(assembly)\n      .where(eq(assemblies.id, id))\n      .returning();\n    return updatedAssembly || undefined;\n  }\n\n  // Maintenance methods\n  async getAllMaintenanceRecords(): Promise<MaintenanceRecord[]> {\n    return await db.select().from(maintenance_records).orderBy(desc(maintenance_records.created_at));\n  }\n\n  async getMaintenanceRecordById(id: string): Promise<MaintenanceRecord | undefined> {\n    const [record] = await db.select().from(maintenance_records).where(eq(maintenance_records.id, id));\n    return record || undefined;\n  }\n\n  async createMaintenanceRecord(record: InsertMaintenanceRecord): Promise<MaintenanceRecord> {\n    const [newRecord] = await db\n      .insert(maintenance_records)\n      .values(record)\n      .returning();\n    return newRecord;\n  }\n\n  async updateMaintenanceRecord(id: string, record: InsertMaintenanceRecord): Promise<MaintenanceRecord | undefined> {\n    const [updatedRecord] = await db\n      .update(maintenance_records)\n      .set(record)\n      .where(eq(maintenance_records.id, id))\n      .returning();\n    return updatedRecord || undefined;\n  }\n\n  // Dashboard stats\n  async getDashboardStats(): Promise<{\n    totalProducts: number;\n    totalOrders: number;\n    pendingOrders: number;\n    totalRevenue: number;\n  }> {\n    const [productCount] = await db.select().from(products);\n    const allOrders = await db.select().from(orders);\n\n    const totalProducts = await db.select().from(products).then(rows => rows.length);\n    const totalOrders = allOrders.length;\n    const pendingOrders = allOrders.filter(order => \n      ['pending', 'paid', 'processing'].includes(order.status)\n    ).length;\n    const totalRevenue = allOrders.reduce((sum, order) => \n      sum + parseFloat(order.total_amount), 0\n    );\n\n    return {\n      totalProducts,\n      totalOrders,\n      pendingOrders,\n      totalRevenue\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14344},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"customer\"), // admin, customer\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const subcategories = pgTable(\"subcategories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  category_id: varchar(\"category_id\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\"),\n  category_id: varchar(\"category_id\"),\n  subcategory_id: varchar(\"subcategory_id\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  image: text(\"image\"),\n  stock: integer(\"stock\").notNull().default(0),\n  weight: text(\"weight\"),\n  specifications: jsonb(\"specifications\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive, out_of_stock\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  order_number: text(\"order_number\").notNull().unique(),\n  user_id: varchar(\"user_id\"),\n  total_amount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  items_count: integer(\"items_count\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, paid, processing, completed, failed, cancelled\n  payment_method: text(\"payment_method\"), // bank_transfer, cashapp, venmo, western_union\n  payment_amount: decimal(\"payment_amount\", { precision: 10, scale: 2 }),\n  payment_transfer_id: text(\"payment_transfer_id\"), // transfer proof/ID\n  payment_transfer_date: timestamp(\"payment_transfer_date\"),\n  customer_info: jsonb(\"customer_info\"), // includes shipping_address, billing_address, contact info\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const order_items = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  order_id: varchar(\"order_id\").notNull(),\n  product_id: varchar(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const deliveries = pgTable(\"deliveries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  delivery_number: text(\"delivery_number\").notNull().unique(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_transit, delivered, cancelled\n  delivery_date: timestamp(\"delivery_date\"),\n  items: jsonb(\"items\").notNull(),\n  notes: text(\"notes\"),\n  driver_name: text(\"driver_name\"),\n  tracking_info: jsonb(\"tracking_info\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const assemblies = pgTable(\"assemblies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // component, kit, full_machine\n  components: jsonb(\"components\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_progress, completed, cancelled\n  priority: text(\"priority\").notNull().default(\"normal\"), // low, normal, high, urgent\n  assigned_to: text(\"assigned_to\"),\n  estimated_time: integer(\"estimated_time\"), // in minutes\n  notes: text(\"notes\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const maintenance_records = pgTable(\"maintenance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // routine, repair, inspection, cleaning\n  priority: text(\"priority\").notNull().default(\"normal\"), // low, normal, high, urgent\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, in_progress, completed, cancelled\n  scheduled_date: timestamp(\"scheduled_date\").notNull(),\n  completed_date: timestamp(\"completed_date\"),\n  technician: text(\"technician\"),\n  description: text(\"description\"),\n  notes: text(\"notes\"),\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  orders: many(orders),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  subcategories: many(subcategories),\n  products: many(products),\n}));\n\nexport const subcategoriesRelations = relations(subcategories, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [subcategories.category_id],\n    references: [categories.id],\n  }),\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one }) => ({\n  category: one(categories, {\n    fields: [products.category_id],\n    references: [categories.id],\n  }),\n  subcategory: one(subcategories, {\n    fields: [products.subcategory_id],\n    references: [subcategories.id],\n  }),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.user_id],\n    references: [users.id],\n  }),\n  orderItems: many(order_items),\n}));\n\nexport const orderItemsRelations = relations(order_items, ({ one }) => ({\n  order: one(orders, {\n    fields: [order_items.order_id],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [order_items.product_id],\n    references: [products.id],\n  }),\n}));\n\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ \n  id: true, \n  created_at: true \n});\nexport const insertCategorySchema = createInsertSchema(categories).omit({ \n  id: true, \n  created_at: true \n});\nexport const insertSubcategorySchema = createInsertSchema(subcategories).omit({ \n  id: true, \n  created_at: true \n});\nexport const insertProductSchema = createInsertSchema(products).omit({ \n  id: true, \n  created_at: true, \n  updated_at: true \n});\nexport const insertOrderSchema = createInsertSchema(orders).omit({ \n  id: true, \n  created_at: true, \n  updated_at: true \n});\nexport const insertOrderItemSchema = createInsertSchema(order_items).omit({ \n  id: true, \n  created_at: true \n});\nexport const insertDeliverySchema = createInsertSchema(deliveries).omit({ \n  id: true, \n  created_at: true, \n  updated_at: true \n});\nexport const insertAssemblySchema = createInsertSchema(assemblies).omit({ \n  id: true, \n  created_at: true, \n  updated_at: true \n});\nexport const insertMaintenanceRecordSchema = createInsertSchema(maintenance_records).omit({ \n  id: true, \n  created_at: true, \n  updated_at: true \n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type Subcategory = typeof subcategories.$inferSelect;\nexport type InsertSubcategory = z.infer<typeof insertSubcategorySchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type OrderItem = typeof order_items.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n\nexport type Delivery = typeof deliveries.$inferSelect;\nexport type InsertDelivery = z.infer<typeof insertDeliverySchema>;\n\nexport type Assembly = typeof assemblies.$inferSelect;\nexport type InsertAssembly = z.infer<typeof insertAssemblySchema>;\n\nexport type MaintenanceRecord = typeof maintenance_records.$inferSelect;\nexport type InsertMaintenanceRecord = z.infer<typeof insertMaintenanceRecordSchema>;\n","size_bytes":8684},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport Layout from \"@/pages/Layout\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Products from \"@/pages/Products\";\nimport Categories from \"@/pages/Categories\";\nimport Orders from \"@/pages/Orders\";\nimport OrderTrack from \"@/pages/OrderTrack\";\nimport Checkout from \"@/pages/Checkout\";\nimport Notifications from \"@/pages/Notifications\";\nimport Monitoring from \"@/pages/Monitoring\";\nimport Deliveries from \"@/pages/Deliveries\";\nimport Assembly from \"@/pages/Assembly\";\nimport Maintenance from \"@/pages/Maintenance\";\nimport Settings from \"@/pages/Settings\";\nimport Help from \"@/pages/Help\";\nimport AuthPage from \"@/pages/AuthPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      <ProtectedRoute\n        path=\"/\"\n        component={Dashboard}\n        allowedRoles={[\"admin\", \"customer\"]}\n      />\n      <ProtectedRoute\n        path=\"/products\"\n        component={Products}\n        allowedRoles={[\"admin\"]}\n      />\n      <ProtectedRoute\n        path=\"/categories\"\n        component={Categories}\n        allowedRoles={[\"admin\"]}\n      />\n      <ProtectedRoute\n        path=\"/orders\"\n        component={Orders}\n        allowedRoles={[\"admin\", \"customer\"]}\n      />\n      <ProtectedRoute\n        path=\"/order-track\"\n        component={OrderTrack}\n        allowedRoles={[\"admin\", \"customer\"]}\n      />\n      <ProtectedRoute\n        path=\"/checkout\"\n        component={Checkout}\n        allowedRoles={[\"admin\", \"customer\"]}\n      />\n      <ProtectedRoute\n        path=\"/notifications\"\n        component={Notifications}\n        allowedRoles={[\"admin\", \"customer\"]}\n      />\n      <ProtectedRoute\n        path=\"/monitoring\"\n        component={Monitoring}\n        allowedRoles={[\"admin\"]}\n      />\n      <ProtectedRoute\n        path=\"/deliveries\"\n        component={Deliveries}\n        allowedRoles={[\"admin\"]}\n      />\n      <ProtectedRoute\n        path=\"/assembly\"\n        component={Assembly}\n        allowedRoles={[\"admin\"]}\n      />\n      <ProtectedRoute\n        path=\"/maintenance\"\n        component={Maintenance}\n        allowedRoles={[\"admin\"]}\n      />\n      <ProtectedRoute\n        path=\"/settings\"\n        component={Settings}\n        allowedRoles={[\"admin\"]}\n      />\n      <ProtectedRoute\n        path=\"/help\"\n        component={Help}\n        allowedRoles={[\"admin\", \"customer\"]}\n      />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Layout>\n            <Router />\n          </Layout>\n          <Toaster />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3124},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 47%, 11%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 47%, 11%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 47%, 11%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(258, 90%, 66%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(158, 64%, 52%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(158, 64%, 52%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 47%, 11%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(221, 83%, 53%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(228, 9%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(210, 25%, 8%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(205, 70%, 8%);\n  --accent-foreground: hsl(221, 83%, 53%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(207, 27%, 18%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(158, 64%, 52%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(228, 9%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205, 70%, 8%);\n  --sidebar-accent-foreground: hsl(221, 83%, 53%);\n  --sidebar-border: hsl(205, 16%, 26%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-feature-settings: \"tnum\";\n  }\n}\n\n@layer utilities {\n  .glass-effect {\n    background: rgba(255, 255, 255, 0.9);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.5);\n  }\n\n  .dark .glass-effect {\n    background: rgba(0, 0, 0, 0.9);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .gradient-primary {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary)) 100%);\n  }\n\n  .gradient-secondary {\n    background: linear-gradient(135deg, hsl(var(--secondary)) 0%, hsl(var(--secondary)) 100%);\n  }\n\n  .gradient-accent {\n    background: linear-gradient(135deg, hsl(var(--accent)) 0%, hsl(var(--accent)) 100%);\n  }\n\n  .gradient-warning {\n    background: linear-gradient(135deg, hsl(38, 92%, 50%) 0%, hsl(38, 92%, 40%) 100%);\n  }\n\n  .hover-lift {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n}\n","size_bytes":3974},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Assembly.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusCircle } from \"lucide-react\";\nimport AssemblyTable from \"@/components/assembly/AssemblyTable\";\nimport AssemblyFilters from \"@/components/assembly/AssemblyFilters\";\nimport AssemblyForm from \"@/components/assembly/AssemblyForm\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Clock, Wrench, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Assembly, InsertAssembly } from \"@shared/schema\";\n\nexport default function Assembly() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingAssembly, setEditingAssembly] = useState<Assembly | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: assemblies = [], isLoading } = useQuery<Assembly[]>({\n    queryKey: [\"/api/assemblies\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertAssembly) => {\n      const response = await apiRequest(\"POST\", \"/api/assemblies\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assemblies\"] });\n      setShowForm(false);\n      toast({\n        title: \"Success\",\n        description: \"Assembly created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create assembly\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertAssembly }) => {\n      const response = await apiRequest(\"PUT\", `/api/assemblies/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assemblies\"] });\n      setShowForm(false);\n      setEditingAssembly(null);\n      toast({\n        title: \"Success\",\n        description: \"Assembly updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update assembly\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const assemblyStats = {\n    total: assemblies?.length || 0,\n    pending: assemblies?.filter((a: Assembly) => a.status === \"pending\").length || 0,\n    in_progress: assemblies?.filter((a: Assembly) => a.status === \"in_progress\").length || 0,\n    completed: assemblies?.filter((a: Assembly) => a.status === \"completed\").length || 0,\n  };\n\n  const handleEdit = (assembly: Assembly) => {\n    setEditingAssembly(assembly);\n    setShowForm(true);\n  };\n\n  const handleSubmit = (data: InsertAssembly) => {\n    if (editingAssembly) {\n      updateMutation.mutate({ id: editingAssembly.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h2 className=\"mb-2 text-3xl font-bold text-foreground\">Assembly</h2>\n          <p className=\"text-muted-foreground\">Manage vending machine component assembly</p>\n        </div>\n        <Button onClick={() => setShowForm(true)} data-testid=\"create-assembly-button\">\n          <PlusCircle className=\"mr-2 h-4 w-4\" />\n          Create Assembly Task\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-4\">\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-blue-100\">\n                <Wrench className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Total Tasks</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"total-assemblies-stat\">\n              {assemblyStats.total}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-orange-100\">\n                <Clock className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Pending</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"pending-assemblies-stat\">\n              {assemblyStats.pending}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-blue-100\">\n                <AlertCircle className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">In Progress</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"in-progress-assemblies-stat\">\n              {assemblyStats.in_progress}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-green-100\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Completed</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"completed-assemblies-stat\">\n              {assemblyStats.completed}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <AssemblyFilters />\n\n      {/* Assembly Table */}\n      <AssemblyTable \n        assemblies={assemblies || []} \n        isLoading={isLoading}\n        onEdit={handleEdit}\n      />\n\n      {/* Assembly Form Modal */}\n      {showForm && (\n        <AssemblyForm\n          assembly={editingAssembly}\n          onSubmit={handleSubmit}\n          onCancel={() => {\n            setShowForm(false);\n            setEditingAssembly(null);\n          }}\n          isLoading={createMutation.isPending || updateMutation.isPending}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":6683},"client/src/pages/Categories.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Trash2, Edit, FolderTree } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Category, Subcategory } from \"@shared/schema\";\nimport CategoryForm from \"@/components/categories/CategoryForm\";\nimport SubcategoryForm from \"@/components/categories/SubcategoryForm\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function Categories() {\n  const [showCategoryForm, setShowCategoryForm] = useState(false);\n  const [showSubcategoryForm, setShowSubcategoryForm] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [editingSubcategory, setEditingSubcategory] = useState<Subcategory | null>(null);\n  const [selectedCategoryForSubcategory, setSelectedCategoryForSubcategory] = useState<string | null>(null);\n  const [categoryToDelete, setCategoryToDelete] = useState<Category | null>(null);\n  const [subcategoryToDelete, setSubcategoryToDelete] = useState<Subcategory | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: subcategories = [] } = useQuery<Subcategory[]>({\n    queryKey: [\"/api/subcategories\"],\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/categories\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setShowCategoryForm(false);\n      toast({\n        title: \"Category created\",\n        description: \"The category has been created successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create category.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/categories/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setShowCategoryForm(false);\n      setEditingCategory(null);\n      toast({\n        title: \"Category updated\",\n        description: \"The category has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update category.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/categories/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/subcategories\"] });\n      setCategoryToDelete(null);\n      toast({\n        title: \"Category deleted\",\n        description: \"The category has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete category.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createSubcategoryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/subcategories\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subcategories\"] });\n      setShowSubcategoryForm(false);\n      setSelectedCategoryForSubcategory(null);\n      toast({\n        title: \"Subcategory created\",\n        description: \"The subcategory has been created successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create subcategory.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSubcategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/subcategories/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subcategories\"] });\n      setShowSubcategoryForm(false);\n      setEditingSubcategory(null);\n      toast({\n        title: \"Subcategory updated\",\n        description: \"The subcategory has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update subcategory.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSubcategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/subcategories/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subcategories\"] });\n      setSubcategoryToDelete(null);\n      toast({\n        title: \"Subcategory deleted\",\n        description: \"The subcategory has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete subcategory.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateCategory = () => {\n    setEditingCategory(null);\n    setShowCategoryForm(true);\n  };\n\n  const handleEditCategory = (category: Category) => {\n    setEditingCategory(category);\n    setShowCategoryForm(true);\n  };\n\n  const handleCategorySubmit = (data: any) => {\n    if (editingCategory) {\n      updateCategoryMutation.mutate({ id: editingCategory.id, data });\n    } else {\n      createCategoryMutation.mutate(data);\n    }\n  };\n\n  const handleAddSubcategory = (categoryId: string) => {\n    setEditingSubcategory(null);\n    setSelectedCategoryForSubcategory(categoryId);\n    setShowSubcategoryForm(true);\n  };\n\n  const handleEditSubcategory = (subcategory: Subcategory) => {\n    setEditingSubcategory(subcategory);\n    setSelectedCategoryForSubcategory(subcategory.category_id);\n    setShowSubcategoryForm(true);\n  };\n\n  const handleSubcategorySubmit = (data: any) => {\n    if (editingSubcategory) {\n      updateSubcategoryMutation.mutate({ id: editingSubcategory.id, data });\n    } else {\n      createSubcategoryMutation.mutate(data);\n    }\n  };\n\n  const getSubcategoriesForCategory = (categoryId: string) => {\n    return subcategories.filter((sub) => sub.category_id === categoryId);\n  };\n\n  if (categoriesLoading) {\n    return <div className=\"p-8\">Loading categories...</div>;\n  }\n\n  return (\n    <div className=\"p-8\" data-testid=\"categories-page\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <FolderTree className=\"h-8 w-8\" />\n            Categories Management\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage product categories and subcategories\n          </p>\n        </div>\n        <Button onClick={handleCreateCategory} data-testid=\"button-add-category\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Category\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {categories.map((category) => {\n          const categorySubcategories = getSubcategoriesForCategory(category.id);\n          return (\n            <Card key={category.id} data-testid={`category-card-${category.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg\">{category.name}</CardTitle>\n                    {category.description && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {category.description}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleEditCategory(category)}\n                      data-testid={`button-edit-category-${category.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => setCategoryToDelete(category)}\n                      data-testid={`button-delete-category-${category.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">\n                      Subcategories ({categorySubcategories.length})\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleAddSubcategory(category.id)}\n                      data-testid={`button-add-subcategory-${category.id}`}\n                    >\n                      <Plus className=\"h-3 w-3 mr-1\" />\n                      Add\n                    </Button>\n                  </div>\n                  <div className=\"space-y-1\">\n                    {categorySubcategories.map((subcategory) => (\n                      <div\n                        key={subcategory.id}\n                        className=\"flex items-center justify-between p-2 rounded-md bg-muted/50 hover:bg-muted\"\n                        data-testid={`subcategory-item-${subcategory.id}`}\n                      >\n                        <span className=\"text-sm\">{subcategory.name}</span>\n                        <div className=\"flex gap-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-6 w-6\"\n                            onClick={() => handleEditSubcategory(subcategory)}\n                            data-testid={`button-edit-subcategory-${subcategory.id}`}\n                          >\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-6 w-6\"\n                            onClick={() => setSubcategoryToDelete(subcategory)}\n                            data-testid={`button-delete-subcategory-${subcategory.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                    {categorySubcategories.length === 0 && (\n                      <p className=\"text-sm text-muted-foreground text-center py-2\">\n                        No subcategories yet\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {categories.length === 0 && (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <FolderTree className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <p className=\"text-lg font-medium mb-2\">No categories yet</p>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Get started by creating your first category\n            </p>\n            <Button onClick={handleCreateCategory}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Category\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {showCategoryForm && (\n        <CategoryForm\n          category={editingCategory}\n          onSubmit={handleCategorySubmit}\n          onCancel={() => {\n            setShowCategoryForm(false);\n            setEditingCategory(null);\n          }}\n          isLoading={createCategoryMutation.isPending || updateCategoryMutation.isPending}\n        />\n      )}\n\n      {showSubcategoryForm && (\n        <SubcategoryForm\n          subcategory={editingSubcategory}\n          categories={categories}\n          initialCategoryId={selectedCategoryForSubcategory}\n          onSubmit={handleSubcategorySubmit}\n          onCancel={() => {\n            setShowSubcategoryForm(false);\n            setEditingSubcategory(null);\n            setSelectedCategoryForSubcategory(null);\n          }}\n          isLoading={createSubcategoryMutation.isPending || updateSubcategoryMutation.isPending}\n        />\n      )}\n\n      <AlertDialog open={!!categoryToDelete} onOpenChange={() => setCategoryToDelete(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Category</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{categoryToDelete?.name}\"? This will also delete all\n              subcategories under this category. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-category\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => categoryToDelete && deleteCategoryMutation.mutate(categoryToDelete.id)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete-category\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <AlertDialog open={!!subcategoryToDelete} onOpenChange={() => setSubcategoryToDelete(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Subcategory</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{subcategoryToDelete?.name}\"? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-subcategory\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => subcategoryToDelete && deleteSubcategoryMutation.mutate(subcategoryToDelete.id)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete-subcategory\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":15353},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport StatsGrid from \"@/components/dashboard/StatsGrid\";\nimport RecentOrders from \"@/components/dashboard/RecentOrders\";\nimport RevenueChart from \"@/components/dashboard/RevenueChart\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Zap, PlusCircle, Activity, Wrench, AlertTriangle, Package, Clock, CheckCircle2, ShoppingCart, Lock } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Order } from \"@shared/schema\";\nimport { useState } from \"react\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const isCustomer = user?.role === \"customer\";\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/stats\"],\n    enabled: !isCustomer, // Only fetch admin stats for non-customers\n  });\n\n  const { data: orders = [], isLoading: ordersLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  // Customer-specific stats\n  const customerOrders = user ? orders.filter(order => order.user_id === user.id) : [];\n  const pendingOrders = customerOrders.filter(order => order.status === \"pending\").length;\n  const completedOrders = customerOrders.filter(order => order.status === \"completed\").length;\n  const totalSpent = customerOrders.reduce((sum, order) => sum + Number(order.total_amount), 0);\n\n  // Reset password state and mutation\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const { toast } = useToast();\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async (data: { currentPassword: string; newPassword: string }) =>\n      apiRequest(\"POST\", \"/api/reset-password\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Your password has been reset successfully\",\n      });\n      setCurrentPassword(\"\");\n      setNewPassword(\"\");\n      setConfirmPassword(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reset password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleResetPassword = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"New passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    resetPasswordMutation.mutate({\n      currentPassword,\n      newPassword,\n    });\n  };\n\n  if (isCustomer) {\n    return (\n      <div className=\"space-y-8\">\n        {/* Customer Welcome Section */}\n        <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n          <div>\n            <h2 className=\"mb-2 text-3xl font-bold text-foreground\">Welcome back, {user?.username}!</h2>\n            <p className=\"text-muted-foreground\">\n              Here's an overview of your orders and activity.\n            </p>\n          </div>\n        </div>\n\n        {/* Customer Stats */}\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n              <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"customer-total-orders\">{customerOrders.length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Orders</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"customer-pending-orders\">{pendingOrders}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Completed Orders</CardTitle>\n              <CheckCircle2 className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"customer-completed-orders\">{completedOrders}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Spent</CardTitle>\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"customer-total-spent\">${totalSpent.toFixed(2)}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Customer Recent Orders */}\n        <Card>\n          <CardHeader>\n            <CardTitle>My Recent Orders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <RecentOrders orders={customerOrders} isLoading={ordersLoading} />\n          </CardContent>\n        </Card>\n\n        {/* Reset Password */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Lock className=\"h-5 w-5\" />\n              Reset Password\n            </CardTitle>\n            <CardDescription>Change your account password</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleResetPassword} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"current-password\">Current Password</Label>\n                <Input\n                  id=\"current-password\"\n                  type=\"password\"\n                  value={currentPassword}\n                  onChange={(e) => setCurrentPassword(e.target.value)}\n                  required\n                  data-testid=\"input-current-password\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"new-password\">New Password</Label>\n                <Input\n                  id=\"new-password\"\n                  type=\"password\"\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  required\n                  data-testid=\"input-new-password\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n                <Input\n                  id=\"confirm-password\"\n                  type=\"password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                disabled={resetPasswordMutation.isPending}\n                data-testid=\"button-reset-password\"\n              >\n                {resetPasswordMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Admin Welcome Section */}\n      <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h2 className=\"mb-2 text-3xl font-bold text-foreground\">Welcome back, {user?.username || \"Admin\"}!</h2>\n          <p className=\"text-muted-foreground\">\n            Here's what's happening with your vending machine network today.\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2 rounded-full bg-green-50 px-4 py-2\">\n          <div className=\"h-3 w-3 animate-pulse rounded-full bg-green-500\"></div>\n          <span className=\"text-sm font-medium text-green-800\">All Systems Operational</span>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <StatsGrid stats={stats} isLoading={statsLoading} />\n\n      {/* Main Content Grid */}\n      <div className=\"grid gap-8 lg:grid-cols-3\">\n        {/* Left Column - Charts and Analytics */}\n        <div className=\"space-y-8 lg:col-span-2\">\n          <RevenueChart />\n        </div>\n\n        {/* Right Column - Recent Activities */}\n        <div className=\"space-y-8\">\n          <RecentOrders orders={orders} isLoading={ordersLoading} />\n\n          {/* Quick Actions */}\n          <Card className=\"glass-effect border-0 shadow-xl\" data-testid=\"quick-actions-card\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center gap-3\">\n                <div className=\"flex h-10 w-10 items-center justify-center rounded-xl bg-gradient-to-br from-purple-500 to-pink-500\">\n                  <Zap className=\"h-5 w-5 text-white\" />\n                </div>\n                Quick Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button className=\"h-12 w-full justify-start gap-3 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700\" data-testid=\"add-product-button\">\n                <PlusCircle className=\"h-4 w-4\" />\n                Add New Product\n              </Button>\n              <Button variant=\"outline\" className=\"h-12 w-full justify-start gap-3\" data-testid=\"health-check-button\">\n                <Activity className=\"h-4 w-4\" />\n                System Health Check\n              </Button>\n              <Button variant=\"outline\" className=\"h-12 w-full justify-start gap-3\" data-testid=\"schedule-maintenance-button\">\n                <Wrench className=\"h-4 w-4\" />\n                Schedule Maintenance\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Alerts */}\n          <Card className=\"glass-effect border-0 border-l-4 border-l-orange-500 shadow-xl\" data-testid=\"alerts-card\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center gap-3 text-orange-800\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                System Alerts\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-start gap-3 rounded-lg bg-orange-50 p-3\" data-testid=\"alert-low-stock\">\n                <div className=\"mt-2 h-2 w-2 flex-shrink-0 rounded-full bg-orange-500\"></div>\n                <div>\n                  <p className=\"text-sm font-medium text-orange-900\">Low Stock Alert</p>\n                  <p className=\"text-xs text-orange-700\">\n                    Some products need restocking (12 items remaining)\n                  </p>\n                  <p className=\"mt-1 text-xs text-orange-600\">5 minutes ago</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3 rounded-lg bg-red-50 p-3\" data-testid=\"alert-maintenance\">\n                <div className=\"mt-2 h-2 w-2 flex-shrink-0 rounded-full bg-red-500\"></div>\n                <div>\n                  <p className=\"text-sm font-medium text-red-900\">Maintenance Due</p>\n                  <p className=\"text-xs text-red-700\">\n                    Equipment requires immediate service\n                  </p>\n                  <p className=\"mt-1 text-xs text-red-600\">1 hour ago</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3 rounded-lg bg-yellow-50 p-3\" data-testid=\"alert-payment\">\n                <div className=\"mt-2 h-2 w-2 flex-shrink-0 rounded-full bg-yellow-500\"></div>\n                <div>\n                  <p className=\"text-sm font-medium text-yellow-900\">Payment Gateway Issue</p>\n                  <p className=\"text-xs text-yellow-700\">\n                    Payment processing delayed\n                  </p>\n                  <p className=\"mt-1 text-xs text-yellow-600\">2 hours ago</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12896},"client/src/pages/Deliveries.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusCircle, Download } from \"lucide-react\";\nimport DeliveriesTable from \"@/components/deliveries/DeliveriesTable\";\nimport DeliveryFilters from \"@/components/deliveries/DeliveryFilters\";\nimport TrackingModal from \"@/components/deliveries/TrackingModal\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Clock, Truck, CheckCircle, XCircle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Delivery } from \"@shared/schema\";\n\nexport default function Deliveries() {\n  const [selectedDelivery, setSelectedDelivery] = useState<Delivery | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: deliveries = [], isLoading } = useQuery<Delivery[]>({\n    queryKey: [\"/api/deliveries\"],\n  });\n\n  const updateDeliveryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/deliveries/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/deliveries\"] });\n      toast({\n        title: \"Success\",\n        description: \"Delivery updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update delivery\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deliveryStats = {\n    total: deliveries?.length || 0,\n    pending: deliveries?.filter((d: Delivery) => d.status === \"pending\").length || 0,\n    in_transit: deliveries?.filter((d: Delivery) => d.status === \"in_transit\").length || 0,\n    delivered: deliveries?.filter((d: Delivery) => d.status === \"delivered\").length || 0,\n    cancelled: deliveries?.filter((d: Delivery) => d.status === \"cancelled\").length || 0,\n  };\n\n  const handleStatusUpdate = (deliveryId: string, status: string) => {\n    updateDeliveryMutation.mutate({\n      id: deliveryId,\n      data: { status }\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h2 className=\"mb-2 text-3xl font-bold text-foreground\">Deliveries</h2>\n          <p className=\"text-muted-foreground\">Track and manage inventory deliveries</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" data-testid=\"export-deliveries-button\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export\n          </Button>\n          <Button data-testid=\"schedule-delivery-button\">\n            <PlusCircle className=\"mr-2 h-4 w-4\" />\n            Schedule Delivery\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-4\">\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-blue-100\">\n                <Truck className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Total Deliveries</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"total-deliveries-stat\">\n              {deliveryStats.total}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-orange-100\">\n                <Clock className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Pending</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"pending-deliveries-stat\">\n              {deliveryStats.pending}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-blue-100\">\n                <Truck className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">In Transit</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"in-transit-deliveries-stat\">\n              {deliveryStats.in_transit}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-green-100\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Delivered</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"delivered-deliveries-stat\">\n              {deliveryStats.delivered}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <DeliveryFilters />\n\n      {/* Deliveries Table */}\n      <DeliveriesTable \n        deliveries={deliveries || []} \n        isLoading={isLoading}\n        onTrackDelivery={setSelectedDelivery}\n        onStatusUpdate={handleStatusUpdate}\n      />\n\n      {/* Tracking Modal */}\n      {selectedDelivery && (\n        <TrackingModal\n          delivery={selectedDelivery}\n          onClose={() => setSelectedDelivery(null)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":6008},"client/src/pages/Help.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { HelpCircle, Mail, Phone, MessageSquare, FileText, Video, BookOpen } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Help() {\n  const { toast } = useToast();\n\n  const handleSubmitTicket = (e: React.FormEvent) => {\n    e.preventDefault();\n    toast({\n      title: \"Support ticket submitted\",\n      description: \"We'll get back to you within 24 hours.\",\n    });\n  };\n\n  return (\n    <div className=\"p-8\" data-testid=\"help-page\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n          <HelpCircle className=\"h-8 w-8\" />\n          Help & Support\n        </h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Find answers to common questions or get in touch with our support team\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5 text-primary\" />\n              <CardTitle>Documentation</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Browse our comprehensive guides and documentation\n            </p>\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-documentation\">\n              <BookOpen className=\"h-4 w-4 mr-2\" />\n              View Documentation\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Video className=\"h-5 w-5 text-primary\" />\n              <CardTitle>Video Tutorials</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Watch step-by-step video guides for common tasks\n            </p>\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-tutorials\">\n              <Video className=\"h-4 w-4 mr-2\" />\n              Watch Tutorials\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <MessageSquare className=\"h-5 w-5 text-primary\" />\n              <CardTitle>Live Chat</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Chat with our support team in real-time\n            </p>\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-live-chat\">\n              <MessageSquare className=\"h-4 w-4 mr-2\" />\n              Start Chat\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Frequently Asked Questions</CardTitle>\n            <CardDescription>Quick answers to common questions</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              <AccordionItem value=\"item-1\">\n                <AccordionTrigger data-testid=\"faq-add-machine\">\n                  How do I add a new vending machine?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Navigate to the Monitoring page and click the \"Add Machine\" button. Fill in the machine details\n                  including name, location, and initial stock level. The machine will appear in your dashboard\n                  immediately after creation.\n                </AccordionContent>\n              </AccordionItem>\n              <AccordionItem value=\"item-2\">\n                <AccordionTrigger data-testid=\"faq-track-orders\">\n                  How do I track orders from my machines?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Go to the Orders page to view all transactions from your vending machines. You can filter orders\n                  by status, date range, or machine location. Click on any order to view detailed information including\n                  items purchased and payment method.\n                </AccordionContent>\n              </AccordionItem>\n              <AccordionItem value=\"item-3\">\n                <AccordionTrigger data-testid=\"faq-schedule-maintenance\">\n                  How do I schedule maintenance for a machine?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Visit the Maintenance page and click \"Schedule Maintenance\". Select the machine, maintenance type,\n                  priority level, and scheduled date. You can assign a technician and add notes about the maintenance\n                  task. You'll receive notifications when maintenance is due.\n                </AccordionContent>\n              </AccordionItem>\n              <AccordionItem value=\"item-4\">\n                <AccordionTrigger data-testid=\"faq-manage-inventory\">\n                  How do I manage product inventory?\n                </AccordionTrigger>\n                <AccordionContent>\n                  The Products page allows you to add, edit, and delete products. You can set prices, stock levels,\n                  categories, and upload product images. Use the filters to quickly find specific products. Stock\n                  levels are automatically updated when orders are placed.\n                </AccordionContent>\n              </AccordionItem>\n              <AccordionItem value=\"item-5\">\n                <AccordionTrigger data-testid=\"faq-create-delivery\">\n                  How do I create a delivery to restock machines?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Go to the Deliveries page and click \"Create Delivery\". Select the destination machine, add the items\n                  to be delivered, and assign a driver. You can track the delivery status and add notes. The machine's\n                  stock level will be updated automatically when the delivery is marked as completed.\n                </AccordionContent>\n              </AccordionItem>\n            </Accordion>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Submit a Support Ticket</CardTitle>\n            <CardDescription>Can't find what you're looking for? Contact us directly</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmitTicket} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"ticket-subject\">Subject</Label>\n                <Input\n                  id=\"ticket-subject\"\n                  placeholder=\"Brief description of your issue\"\n                  required\n                  data-testid=\"input-ticket-subject\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"ticket-email\">Email Address</Label>\n                <Input\n                  id=\"ticket-email\"\n                  type=\"email\"\n                  placeholder=\"your@email.com\"\n                  required\n                  data-testid=\"input-ticket-email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"ticket-message\">Message</Label>\n                <Textarea\n                  id=\"ticket-message\"\n                  placeholder=\"Describe your issue in detail...\"\n                  className=\"min-h-[150px]\"\n                  required\n                  data-testid=\"input-ticket-message\"\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-submit-ticket\">\n                <Mail className=\"h-4 w-4 mr-2\" />\n                Submit Ticket\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Contact Information</CardTitle>\n          <CardDescription>Other ways to reach our support team</CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"flex items-start gap-3\">\n            <Mail className=\"h-5 w-5 text-primary mt-0.5\" />\n            <div>\n              <h4 className=\"font-medium\">Email Support</h4>\n              <p className=\"text-sm text-muted-foreground\">support@vendingpro.com</p>\n              <p className=\"text-xs text-muted-foreground mt-1\">Response time: Within 24 hours</p>\n            </div>\n          </div>\n          <div className=\"flex items-start gap-3\">\n            <Phone className=\"h-5 w-5 text-primary mt-0.5\" />\n            <div>\n              <h4 className=\"font-medium\">Phone Support</h4>\n              <p className=\"text-sm text-muted-foreground\">+1 (555) 123-4567</p>\n              <p className=\"text-xs text-muted-foreground mt-1\">Mon-Fri: 9am-6pm EST</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9574},"client/src/pages/Layout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  LayoutDashboard,\n  Package,\n  ShoppingCart,\n  Activity,\n  Truck,\n  Wrench,\n  Settings,\n  HelpCircle,\n  Menu,\n  Search,\n  Bell,\n  ChevronRight,\n  FolderTree,\n  LogOut,\n} from \"lucide-react\";\nimport type { Order } from \"@shared/schema\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [location, setLocation] = useLocation();\n  const [mobileOpen, setMobileOpen] = useState(false);\n  const { user, logoutMutation } = useAuth();\n\n  // Global redirect for product_id or product parameter\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const productId = params.get(\"product_id\") || params.get(\"product\");\n    \n    // Only redirect if we have a product ID and we're NOT already on auth or checkout\n    if (productId && location !== \"/auth\" && location !== \"/checkout\") {\n      const paramName = params.get(\"product_id\") ? \"product_id\" : \"product\";\n      \n      // If user is logged in, go directly to checkout\n      if (user) {\n        setLocation(`/checkout?${paramName}=${productId}`);\n      } else {\n        // If not logged in, go to auth with product parameter\n        setLocation(`/auth?${paramName}=${productId}`);\n      }\n    }\n  }, [location, user, setLocation]);\n\n  // Fetch orders to get dynamic count\n  const { data: orders = [] } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n    enabled: !!user,\n  });\n\n  // Fetch products to get dynamic count\n  const { data: products = [] } = useQuery<any[]>({\n    queryKey: [\"/api/products\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  // Calculate order count based on user role\n  const orderCount = user?.role === \"admin\" \n    ? orders.length \n    : orders.filter(order => order.user_id === user?.id).length;\n  \n  // Get product count for admin\n  const productCount = products.length;\n\n  const navigationItems = [\n    {\n      href: \"/\",\n      label: \"Dashboard\",\n      icon: LayoutDashboard,\n      roles: [\"admin\", \"customer\"],\n    },\n    {\n      href: \"/products\",\n      label: \"Products\",\n      icon: Package,\n      badge: productCount > 0 ? productCount.toString() : undefined,\n      roles: [\"admin\"],\n    },\n    {\n      href: \"/categories\",\n      label: \"Categories\",\n      icon: FolderTree,\n      roles: [\"admin\"],\n    },\n    {\n      href: \"/orders\",\n      label: \"Orders\",\n      icon: ShoppingCart,\n      badge: orderCount > 0 ? orderCount.toString() : undefined,\n      variant: \"outline\" as const,\n      roles: [\"admin\", \"customer\"],\n    },\n    {\n      href: \"/order-track\",\n      label: \"Track Order\",\n      icon: Package,\n      roles: [\"admin\", \"customer\"],\n    },\n    {\n      href: \"/monitoring\",\n      label: \"Monitoring\",\n      icon: Activity,\n      roles: [\"admin\"],\n    },\n    { href: \"/deliveries\", label: \"Deliveries\", icon: Truck, roles: [\"admin\"] },\n    { href: \"/assembly\", label: \"Assembly\", icon: Wrench, roles: [\"admin\"] },\n    {\n      href: \"/maintenance\",\n      label: \"Maintenance\",\n      icon: Settings,\n      badge: \"3\",\n      variant: \"destructive\" as const,\n      roles: [\"admin\"],\n    },\n  ];\n\n  // Don't show layout for auth page\n  if (location === \"/auth\") {\n    return <>{children}</>;\n  }\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const getUserInitials = (username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  };\n\n  const Sidebar = ({ mobile = false }: { mobile?: boolean }) => (\n    <div className=\"flex h-full flex-col\">\n      {/* Logo & Brand */}\n      <div className=\"border-b border-border p-6\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex h-10 w-10 items-center justify-center rounded-xl bg-gradient-to-br from-blue-500 to-blue-600\">\n            <Package className=\"h-6 w-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-bold text-foreground\">VendingPro</h1>\n            <p className=\"text-xs text-muted-foreground\">Admin Dashboard</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 space-y-1 overflow-y-auto p-4\">\n        {navigationItems\n          .filter((item) => !user || item.roles.includes(user.role))\n          .map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href;\n\n            return (\n              <Link\n                key={item.href}\n                href={item.href}\n                onClick={() => mobile && setMobileOpen(false)}\n              >\n                <div\n                  className={`flex w-full items-center gap-3 rounded-lg px-4 py-3 text-sm transition-colors hover:bg-accent hover:text-accent-foreground ${\n                    isActive\n                      ? \"bg-accent text-accent-foreground font-semibold\"\n                      : \"text-muted-foreground\"\n                  }`}\n                  data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                >\n                  <Icon className=\"h-5 w-5\" />\n                  <span className=\"flex-1\">{item.label}</span>\n                  {item.badge && (\n                    <Badge\n                      variant={item.variant || \"secondary\"}\n                      className=\"ml-auto text-xs\"\n                    >\n                      {item.badge}\n                    </Badge>\n                  )}\n                </div>\n              </Link>\n            );\n          })}\n\n        <div className=\"mt-4 border-t border-border pt-4\">\n          {(!user || user.role === \"admin\") && (\n            <Link href=\"/settings\">\n              <div\n                className=\"flex w-full items-center gap-3 rounded-lg px-4 py-3 text-sm text-muted-foreground transition-colors hover:bg-accent hover:text-accent-foreground\"\n                data-testid=\"nav-settings\"\n              >\n                <Settings className=\"h-5 w-5\" />\n                <span>Settings</span>\n              </div>\n            </Link>\n          )}\n          <Link href=\"/help\">\n            <div\n              className=\"flex w-full items-center gap-3 rounded-lg px-4 py-3 text-sm text-muted-foreground transition-colors hover:bg-accent hover:text-accent-foreground\"\n              data-testid=\"nav-help\"\n            >\n              <HelpCircle className=\"h-5 w-5\" />\n              <span>Help & Support</span>\n            </div>\n          </Link>\n        </div>\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"border-t border-border p-4\">\n        {user ? (\n          <div>\n            <div className=\"flex items-center gap-3 rounded-lg p-3 mb-2\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-blue-500 to-purple-500 font-semibold text-white\">\n                {getUserInitials(user.username)}\n              </div>\n              <div className=\"flex-1\">\n                <p\n                  className=\"text-sm font-semibold text-foreground\"\n                  data-testid=\"text-username\"\n                >\n                  {user.username}\n                </p>\n                <p\n                  className=\"text-xs text-muted-foreground\"\n                  data-testid=\"text-user-role\"\n                >\n                  {user.role}\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-muted-foreground\"\n              onClick={handleLogout}\n              disabled={logoutMutation.isPending}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n            </Button>\n          </div>\n        ) : (\n          <div className=\"text-sm text-muted-foreground text-center\">\n            Not logged in\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      {/* Desktop Sidebar */}\n      <aside className=\"hidden w-64 bg-card md:flex\">\n        <Sidebar />\n      </aside>\n\n      {/* Mobile Sidebar */}\n      <Sheet open={mobileOpen} onOpenChange={setMobileOpen}>\n        <SheetContent side=\"left\" className=\"w-64 p-0\">\n          <Sidebar mobile />\n        </SheetContent>\n      </Sheet>\n\n      {/* Main Content */}\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"flex-shrink-0 sticky top-0 z-30 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n          <div className=\"flex items-center justify-between px-4 py-4 md:px-8\">\n            {/* Mobile Menu Button */}\n            <Sheet open={mobileOpen} onOpenChange={setMobileOpen}>\n              <SheetTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"md:hidden\"\n                  data-testid=\"mobile-menu-button\"\n                >\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n            </Sheet>\n\n            {/* Search Bar */}\n            <div className=\"mx-4 hidden max-w-md flex-1 md:block\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search products, orders, machines...\"\n                  className=\"pl-10 pr-4\"\n                  data-testid=\"search-input\"\n                />\n              </div>\n            </div>\n\n            {/* Header Actions */}\n            <div className=\"flex items-center gap-2\">\n              <Link href=\"/notifications\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"relative\"\n                  data-testid=\"notifications-button\"\n                >\n                  <Bell className=\"h-5 w-5\" />\n                  <span className=\"absolute right-1 top-1 h-2 w-2 rounded-full bg-destructive\"></span>\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </header>\n\n        {/* Page Content */}\n        <div className=\"flex-1 overflow-y-auto p-4 md:p-8\">{children}</div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":10741},"client/src/pages/Maintenance.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusCircle } from \"lucide-react\";\nimport MaintenanceTable from \"@/components/maintenance/MaintenanceTable\";\nimport MaintenanceForm from \"@/components/maintenance/MaintenanceForm\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Clock, Wrench, CheckCircle, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { MaintenanceRecord, InsertMaintenanceRecord } from \"@shared/schema\";\n\nexport default function Maintenance() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingRecord, setEditingRecord] = useState<MaintenanceRecord | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: maintenanceRecords = [], isLoading } = useQuery<MaintenanceRecord[]>({\n    queryKey: [\"/api/maintenance\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertMaintenanceRecord) => {\n      const response = await apiRequest(\"POST\", \"/api/maintenance\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/maintenance\"] });\n      setShowForm(false);\n      toast({\n        title: \"Success\",\n        description: \"Maintenance record created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create maintenance record\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertMaintenanceRecord }) => {\n      const response = await apiRequest(\"PUT\", `/api/maintenance/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/maintenance\"] });\n      setShowForm(false);\n      setEditingRecord(null);\n      toast({\n        title: \"Success\",\n        description: \"Maintenance record updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update maintenance record\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const maintenanceStats = {\n    total: maintenanceRecords?.length || 0,\n    scheduled: maintenanceRecords?.filter((r: MaintenanceRecord) => r.status === \"scheduled\").length || 0,\n    in_progress: maintenanceRecords?.filter((r: MaintenanceRecord) => r.status === \"in_progress\").length || 0,\n    completed: maintenanceRecords?.filter((r: MaintenanceRecord) => r.status === \"completed\").length || 0,\n  };\n\n  const handleEdit = (record: MaintenanceRecord) => {\n    setEditingRecord(record);\n    setShowForm(true);\n  };\n\n  const handleSubmit = (data: InsertMaintenanceRecord) => {\n    if (editingRecord) {\n      updateMutation.mutate({ id: editingRecord.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h2 className=\"mb-2 text-3xl font-bold text-foreground\">Maintenance</h2>\n          <p className=\"text-muted-foreground\">Schedule and track maintenance activities</p>\n        </div>\n        <Button onClick={() => setShowForm(true)} data-testid=\"schedule-maintenance-button\">\n          <PlusCircle className=\"mr-2 h-4 w-4\" />\n          Schedule Maintenance\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-4\">\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-blue-100\">\n                <Wrench className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Total Records</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"total-maintenance-stat\">\n              {maintenanceStats.total}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-orange-100\">\n                <Clock className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Scheduled</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"scheduled-maintenance-stat\">\n              {maintenanceStats.scheduled}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-blue-100\">\n                <AlertTriangle className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">In Progress</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"in-progress-maintenance-stat\">\n              {maintenanceStats.in_progress}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-green-100\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Completed</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"completed-maintenance-stat\">\n              {maintenanceStats.completed}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Maintenance Table */}\n      <MaintenanceTable \n        records={maintenanceRecords || []} \n        isLoading={isLoading}\n        onEdit={handleEdit}\n      />\n\n      {/* Maintenance Form Modal */}\n      {showForm && (\n        <MaintenanceForm\n          record={editingRecord}\n          onSubmit={handleSubmit}\n          onCancel={() => {\n            setShowForm(false);\n            setEditingRecord(null);\n          }}\n          isLoading={createMutation.isPending || updateMutation.isPending}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":6808},"client/src/pages/Monitoring.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { List, Grid, PackageCheck, MapPin, User, Calendar } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Monitoring() {\n  const [viewMode, setViewMode] = useState<\"card\" | \"list\">(\"card\");\n  const { user } = useAuth();\n  const isAdmin = user?.role === \"admin\";\n\n  const { data: deliveredOrders = [], isLoading: isLoadingDelivered } = useQuery<any[]>({\n    queryKey: [\"/api/monitoring/delivered\"],\n    enabled: isAdmin,\n  });\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"N/A\";\n    const dateObj = date instanceof Date ? date : new Date(date);\n    return dateObj.toLocaleDateString();\n  };\n\n  if (!isAdmin) {\n    return (\n      <div className=\"flex min-h-[400px] flex-col items-center justify-center\">\n        <PackageCheck className=\"mb-4 h-16 w-16 text-muted-foreground\" />\n        <h3 className=\"mb-2 text-lg font-semibold\">Admin Access Required</h3>\n        <p className=\"text-muted-foreground\">This page is only accessible to administrators.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n        <div>\n          <div className=\"mb-2 flex items-center gap-2\">\n            <PackageCheck className=\"h-8 w-8 text-foreground\" />\n            <h2 className=\"text-3xl font-bold text-foreground\">Successfully Delivered Orders</h2>\n          </div>\n          <p className=\"text-muted-foreground\">Track and monitor all successfully delivered orders</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant={viewMode === \"card\" ? \"default\" : \"outline\"}\n            onClick={() => setViewMode(\"card\")}\n            data-testid=\"card-view-button\"\n          >\n            <Grid className=\"mr-2 h-4 w-4\" />\n            Card View\n          </Button>\n          <Button\n            variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n            onClick={() => setViewMode(\"list\")}\n            data-testid=\"list-view-button\"\n          >\n            <List className=\"mr-2 h-4 w-4\" />\n            List View\n          </Button>\n        </div>\n      </div>\n\n      {/* Content */}\n      {viewMode === \"card\" ? (\n        // Card View\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {isLoadingDelivered ? (\n            Array.from({ length: 6 }).map((_, i) => (\n              <Card key={i} className=\"glass-effect\">\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-48 w-full\" />\n                </CardContent>\n              </Card>\n            ))\n          ) : deliveredOrders.length > 0 ? (\n            deliveredOrders.map((order) => (\n              <Card key={order.order_id} className=\"glass-effect hover-lift\" data-testid={`delivered-order-card-${order.order_number}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"mb-4 flex items-start justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Order ID</p>\n                      <p className=\"text-xl font-bold text-foreground\">#{order.order_number}</p>\n                    </div>\n                    <Badge variant=\"default\" className=\"bg-green-500\">\n                      <PackageCheck className=\"mr-1 h-3 w-3\" />\n                      Delivered\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"h-4 w-4 text-muted-foreground\" />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">{order.username || 'Guest'}</p>\n                        <p className=\"text-xs text-muted-foreground\">{order.email || 'N/A'}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">{order.machine_name || 'N/A'}</p>\n                        <p className=\"text-xs text-muted-foreground\">{order.machine_location || 'N/A'}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                      <p className=\"text-sm\">{formatDate(order.created_at)}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4 flex items-center justify-between border-t border-border pt-4\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Items</p>\n                      <p className=\"text-sm font-medium\">{order.items_count}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-xs text-muted-foreground\">Total</p>\n                      <p className=\"text-lg font-bold text-foreground\">${parseFloat(order.total_amount).toFixed(2)}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <div className=\"col-span-full flex min-h-[400px] flex-col items-center justify-center rounded-lg border-2 border-dashed border-muted-foreground/25\">\n              <PackageCheck className=\"mb-4 h-16 w-16 text-muted-foreground\" />\n              <h3 className=\"mb-2 text-lg font-semibold\">No delivered orders yet</h3>\n              <p className=\"text-muted-foreground\">Delivered orders will appear here when completed.</p>\n            </div>\n          )}\n        </div>\n      ) : (\n        // List View\n        <Card className=\"glass-effect overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader className=\"bg-muted/50\">\n                <TableRow>\n                  <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase\">Order ID</TableHead>\n                  <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase\">Customer</TableHead>\n                  <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase\">Machine</TableHead>\n                  <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase\">Items</TableHead>\n                  <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase\">Total</TableHead>\n                  <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase\">Date</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody className=\"divide-y divide-border\">\n                {isLoadingDelivered ? (\n                  Array.from({ length: 5 }).map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                    </TableRow>\n                  ))\n                ) : deliveredOrders.length > 0 ? (\n                  deliveredOrders.map((order) => (\n                    <TableRow key={order.order_id} data-testid={`delivered-order-list-${order.order_number}`}>\n                      <TableCell className=\"px-6 py-4 font-semibold\">#{order.order_number}</TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        <div>\n                          <p className=\"font-medium\">{order.username || 'Guest'}</p>\n                          <p className=\"text-sm text-muted-foreground\">{order.email || 'N/A'}</p>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">\n                        <div>\n                          <p className=\"font-medium\">{order.machine_name || 'N/A'}</p>\n                          <p className=\"text-sm text-muted-foreground\">{order.machine_location || 'N/A'}</p>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4\">{order.items_count} items</TableCell>\n                      <TableCell className=\"px-6 py-4 font-semibold\">${parseFloat(order.total_amount).toFixed(2)}</TableCell>\n                      <TableCell className=\"px-6 py-4 text-muted-foreground\">{formatDate(order.created_at)}</TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"h-24 text-center\">\n                      <p className=\"text-muted-foreground\">No delivered orders yet</p>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":9703},"client/src/pages/Orders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, Filter } from \"lucide-react\";\nimport OrdersTable from \"@/components/orders/OrdersTable\";\nimport OrderFilters from \"@/components/orders/OrderFilters\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CheckCircle, Clock, XCircle, ShoppingCart } from \"lucide-react\";\nimport type { Order } from \"@shared/schema\";\n\nexport default function Orders() {\n  const [filters, setFilters] = useState({\n    search: \"\",\n    status: \"all\",\n    dateRange: \"all\",\n  });\n\n  const { data: orders = [], isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  // Apply filters\n  const filteredOrders = orders?.filter((order: Order) => {\n    // Search filter\n    if (filters.search && !order.order_number.toLowerCase().includes(filters.search.toLowerCase())) {\n      return false;\n    }\n    // Status filter\n    if (filters.status !== \"all\" && order.status !== filters.status) {\n      return false;\n    }\n    // Date range filter\n    if (filters.dateRange !== \"all\" && order.created_at) {\n      const orderDate = new Date(order.created_at);\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      \n      if (filters.dateRange === \"today\" && orderDate < today) {\n        return false;\n      }\n      if (filters.dateRange === \"week\") {\n        const weekAgo = new Date(today);\n        weekAgo.setDate(today.getDate() - 7);\n        if (orderDate < weekAgo) {\n          return false;\n        }\n      }\n      if (filters.dateRange === \"month\") {\n        const monthAgo = new Date(today);\n        monthAgo.setMonth(today.getMonth() - 1);\n        if (orderDate < monthAgo) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }) || [];\n\n  const orderStats = {\n    total: orders?.length || 0,\n    completed: orders?.filter((o: any) => o.status === \"completed\").length || 0,\n    pending: orders?.filter((o: any) => [\"pending\", \"paid\", \"processing\"].includes(o.status)).length || 0,\n    failed: orders?.filter((o: any) => o.status === \"failed\").length || 0,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h2 className=\"mb-2 text-3xl font-bold text-foreground\">Orders</h2>\n          <p className=\"text-muted-foreground\">Track and manage all vending machine transactions</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" data-testid=\"export-orders-button\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export\n          </Button>\n          <Button data-testid=\"filter-orders-button\">\n            <Filter className=\"mr-2 h-4 w-4\" />\n            Filter\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-4\">\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-blue-100\">\n                <ShoppingCart className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Total Orders</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"total-orders-stat\">\n              {orderStats.total}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-green-100\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Completed</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"completed-orders-stat\">\n              {orderStats.completed}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-orange-100\">\n                <Clock className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Pending</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"pending-orders-stat\">\n              {orderStats.pending}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-effect\">\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-red-100\">\n                <XCircle className=\"h-5 w-5 text-red-600\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Failed</span>\n            </div>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"failed-orders-stat\">\n              {orderStats.failed}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <OrderFilters filters={filters} onFiltersChange={setFilters} />\n\n      {/* Orders Table */}\n      <OrdersTable orders={filteredOrders} isLoading={isLoading} />\n    </div>\n  );\n}\n","size_bytes":5680},"client/src/pages/Products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusCircle } from \"lucide-react\";\nimport ProductGrid from \"@/components/products/ProductGrid\";\nimport ProductFilters from \"@/components/products/ProductFilters\";\nimport ProductForm from \"@/components/products/ProductForm\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product, InsertProduct } from \"@shared/schema\";\n\nexport default function Products() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [filters, setFilters] = useState({\n    search: \"\",\n    category: \"all\",\n    status: \"all\",\n    sortBy: \"name\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertProduct) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setShowForm(false);\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertProduct }) => {\n      const response = await apiRequest(\"PUT\", `/api/products/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setShowForm(false);\n      setEditingProduct(null);\n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to update product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/products/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Product deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    setShowForm(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Are you sure you want to delete this product?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleSubmit = (data: InsertProduct) => {\n    if (editingProduct) {\n      updateMutation.mutate({ id: editingProduct.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const filteredProducts = (products?.filter((product: Product) => {\n    if (filters.search && !product.name.toLowerCase().includes(filters.search.toLowerCase())) {\n      return false;\n    }\n    if (filters.category && filters.category !== \"all\" && product.category !== filters.category) {\n      return false;\n    }\n    if (filters.status && filters.status !== \"all\") {\n      if (filters.status === \"out_of_stock\" && product.stock > 0) {\n        return false;\n      }\n      if (filters.status === \"active\" && product.stock === 0) {\n        return false;\n      }\n    }\n    return true;\n  }) || []).sort((a, b) => {\n    switch (filters.sortBy) {\n      case \"name\":\n        return a.name.localeCompare(b.name);\n      case \"price-asc\":\n        return parseFloat(a.price) - parseFloat(b.price);\n      case \"price-desc\":\n        return parseFloat(b.price) - parseFloat(a.price);\n      case \"stock\":\n        return b.stock - a.stock;\n      default:\n        return 0;\n    }\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h2 className=\"mb-2 text-3xl font-bold text-foreground\">Products</h2>\n          <p className=\"text-muted-foreground\">Manage your vending machine inventory</p>\n        </div>\n        <Button onClick={() => setShowForm(true)} data-testid=\"add-product-button\">\n          <PlusCircle className=\"mr-2 h-4 w-4\" />\n          Add Product\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <ProductFilters filters={filters} onFiltersChange={setFilters} />\n\n      {/* Product Count */}\n      {!isLoading && (\n        <div className=\"flex items-center justify-between rounded-lg border bg-card p-4\">\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"product-count\">\n            Showing <span className=\"font-semibold text-foreground\">{filteredProducts.length}</span> of{\" \"}\n            <span className=\"font-semibold text-foreground\">{products.length}</span> products\n          </p>\n        </div>\n      )}\n\n      {/* Product Grid */}\n      <ProductGrid\n        products={filteredProducts}\n        isLoading={isLoading}\n        onEdit={handleEdit}\n        onDelete={handleDelete}\n      />\n\n      {/* Product Form Modal */}\n      {showForm && (\n        <ProductForm\n          product={editingProduct}\n          onSubmit={handleSubmit}\n          onCancel={() => {\n            setShowForm(false);\n            setEditingProduct(null);\n          }}\n          isLoading={createMutation.isPending || updateMutation.isPending}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":5876},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Settings as SettingsIcon, Bell, Shield, Database, Mail, Globe } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [pushNotifications, setPushNotifications] = useState(true);\n  const [autoRestock, setAutoRestock] = useState(false);\n  const [maintenanceAlerts, setMaintenanceAlerts] = useState(true);\n\n  const handleSaveGeneral = () => {\n    toast({\n      title: \"Settings saved\",\n      description: \"Your general settings have been updated successfully.\",\n    });\n  };\n\n  const handleSaveNotifications = () => {\n    toast({\n      title: \"Notification settings saved\",\n      description: \"Your notification preferences have been updated.\",\n    });\n  };\n\n  return (\n    <div className=\"p-8\" data-testid=\"settings-page\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n          <SettingsIcon className=\"h-8 w-8\" />\n          Settings\n        </h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Manage your VendingPro dashboard preferences and configuration\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"general\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"general\" data-testid=\"tab-general\">\n            <Globe className=\"h-4 w-4 mr-2\" />\n            General\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n            <Bell className=\"h-4 w-4 mr-2\" />\n            Notifications\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" data-testid=\"tab-security\">\n            <Shield className=\"h-4 w-4 mr-2\" />\n            Security\n          </TabsTrigger>\n          <TabsTrigger value=\"data\" data-testid=\"tab-data\">\n            <Database className=\"h-4 w-4 mr-2\" />\n            Data & Storage\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"general\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Business Information</CardTitle>\n              <CardDescription>Update your company and contact details</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"company-name\">Company Name</Label>\n                <Input\n                  id=\"company-name\"\n                  placeholder=\"VendingPro Inc.\"\n                  defaultValue=\"VendingPro Inc.\"\n                  data-testid=\"input-company-name\"\n                />\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"contact-email\">Contact Email</Label>\n                  <Input\n                    id=\"contact-email\"\n                    type=\"email\"\n                    placeholder=\"contact@vendingpro.com\"\n                    defaultValue=\"contact@vendingpro.com\"\n                    data-testid=\"input-contact-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"contact-phone\">Contact Phone</Label>\n                  <Input\n                    id=\"contact-phone\"\n                    type=\"tel\"\n                    placeholder=\"+1 (555) 123-4567\"\n                    defaultValue=\"+1 (555) 123-4567\"\n                    data-testid=\"input-contact-phone\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Business Address</Label>\n                <Input\n                  id=\"address\"\n                  placeholder=\"123 Main St, City, State 12345\"\n                  defaultValue=\"123 Main St, City, State 12345\"\n                  data-testid=\"input-address\"\n                />\n              </div>\n              <Button onClick={handleSaveGeneral} data-testid=\"button-save-general\">\n                Save Changes\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Regional Settings</CardTitle>\n              <CardDescription>Configure timezone and currency preferences</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"timezone\">Timezone</Label>\n                  <Input\n                    id=\"timezone\"\n                    placeholder=\"America/New_York\"\n                    defaultValue=\"America/New_York\"\n                    data-testid=\"input-timezone\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currency\">Currency</Label>\n                  <Input\n                    id=\"currency\"\n                    placeholder=\"USD\"\n                    defaultValue=\"USD\"\n                    data-testid=\"input-currency\"\n                  />\n                </div>\n              </div>\n              <Button onClick={handleSaveGeneral} data-testid=\"button-save-regional\">\n                Save Changes\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Notification Preferences</CardTitle>\n              <CardDescription>Choose how you want to be notified about important events</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label htmlFor=\"email-notifications\">Email Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Receive email updates about orders, deliveries, and maintenance\n                  </p>\n                </div>\n                <Switch\n                  id=\"email-notifications\"\n                  checked={emailNotifications}\n                  onCheckedChange={setEmailNotifications}\n                  data-testid=\"switch-email-notifications\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label htmlFor=\"push-notifications\">Push Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get instant alerts for critical machine issues\n                  </p>\n                </div>\n                <Switch\n                  id=\"push-notifications\"\n                  checked={pushNotifications}\n                  onCheckedChange={setPushNotifications}\n                  data-testid=\"switch-push-notifications\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label htmlFor=\"maintenance-alerts\">Maintenance Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Receive reminders for scheduled maintenance tasks\n                  </p>\n                </div>\n                <Switch\n                  id=\"maintenance-alerts\"\n                  checked={maintenanceAlerts}\n                  onCheckedChange={setMaintenanceAlerts}\n                  data-testid=\"switch-maintenance-alerts\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label htmlFor=\"auto-restock\">Auto-Restock Alerts</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get notified when products are running low\n                  </p>\n                </div>\n                <Switch\n                  id=\"auto-restock\"\n                  checked={autoRestock}\n                  onCheckedChange={setAutoRestock}\n                  data-testid=\"switch-auto-restock\"\n                />\n              </div>\n              <Button onClick={handleSaveNotifications} data-testid=\"button-save-notifications\">\n                Save Notification Settings\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Security Settings</CardTitle>\n              <CardDescription>Manage your account security and authentication</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"current-password\">Current Password</Label>\n                <Input\n                  id=\"current-password\"\n                  type=\"password\"\n                  placeholder=\"Enter current password\"\n                  data-testid=\"input-current-password\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"new-password\">New Password</Label>\n                <Input\n                  id=\"new-password\"\n                  type=\"password\"\n                  placeholder=\"Enter new password\"\n                  data-testid=\"input-new-password\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n                <Input\n                  id=\"confirm-password\"\n                  type=\"password\"\n                  placeholder=\"Confirm new password\"\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n              <Button data-testid=\"button-change-password\">Change Password</Button>\n            </CardContent>\n          </Card>\n\n        </TabsContent>\n\n        <TabsContent value=\"data\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Data Management</CardTitle>\n              <CardDescription>Manage your data storage and backup settings</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">Storage Usage</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    You are currently using 2.4 GB of 10 GB available storage.\n                  </p>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Products & Images</span>\n                    <span>1.2 GB</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Order History</span>\n                    <span>0.8 GB</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Machine Logs</span>\n                    <span>0.4 GB</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Data Export</CardTitle>\n              <CardDescription>Download your data for backup or migration</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Export all your data including products, orders, machines, and customer information in CSV or JSON format.\n              </p>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" data-testid=\"button-export-csv\">\n                  Export as CSV\n                </Button>\n                <Button variant=\"outline\" data-testid=\"button-export-json\">\n                  Export as JSON\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":12687},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/assembly/AssemblyFilters.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function AssemblyFilters() {\n  return (\n    <Card className=\"glass-effect\" data-testid=\"assembly-filters\">\n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\n          <div>\n            <Label htmlFor=\"assembly-search\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Search\n            </Label>\n            <Input\n              id=\"assembly-search\"\n              type=\"text\"\n              placeholder=\"Task name, assignee...\"\n              data-testid=\"assembly-search-input\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"assembly-type\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Type\n            </Label>\n            <Select data-testid=\"assembly-type-select\">\n              <SelectTrigger id=\"assembly-type\">\n                <SelectValue placeholder=\"All Types\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"component\">Component</SelectItem>\n                <SelectItem value=\"kit\">Kit</SelectItem>\n                <SelectItem value=\"full_machine\">Full Machine</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"assembly-status\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Status\n            </Label>\n            <Select data-testid=\"assembly-status-select\">\n              <SelectTrigger id=\"assembly-status\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"assembly-priority\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Priority\n            </Label>\n            <Select data-testid=\"assembly-priority-select\">\n              <SelectTrigger id=\"assembly-priority\">\n                <SelectValue placeholder=\"All Priorities\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Priorities</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"normal\">Normal</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"urgent\">Urgent</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3240},"client/src/components/assembly/AssemblyForm.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { insertAssemblySchema, type Assembly, type InsertAssembly } from \"@shared/schema\";\n\ninterface AssemblyFormProps {\n  assembly?: Assembly | null;\n  onSubmit: (data: InsertAssembly) => void;\n  onCancel: () => void;\n  isLoading: boolean;\n}\n\nexport default function AssemblyForm({ assembly, onSubmit, onCancel, isLoading }: AssemblyFormProps) {\n  const form = useForm<InsertAssembly>({\n    resolver: zodResolver(insertAssemblySchema),\n    defaultValues: {\n      name: \"\",\n      type: \"component\",\n      components: {},\n      status: \"pending\",\n      priority: \"normal\",\n      assigned_to: \"\",\n      estimated_time: 60,\n      notes: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (assembly) {\n      form.reset({\n        name: assembly.name,\n        type: assembly.type,\n        components: assembly.components,\n        status: assembly.status,\n        priority: assembly.priority,\n        assigned_to: assembly.assigned_to || \"\",\n        estimated_time: assembly.estimated_time || 60,\n        notes: assembly.notes || \"\",\n      });\n    }\n  }, [assembly, form]);\n\n  const handleSubmit = (data: InsertAssembly) => {\n    // Parse components JSON if it's a string\n    let parsedData = { ...data };\n    if (typeof data.components === 'string') {\n      try {\n        parsedData.components = JSON.parse(data.components);\n      } catch {\n        // If parsing fails, create a simple object\n        parsedData.components = { description: data.components };\n      }\n    }\n    onSubmit(parsedData);\n  };\n\n  const componentsString = typeof form.getValues(\"components\") === 'string' \n    ? form.getValues(\"components\") as string\n    : JSON.stringify(form.getValues(\"components\"), null, 2);\n\n  return (\n    <Dialog open={true} onOpenChange={onCancel}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"assembly-form-dialog\">\n        <DialogHeader>\n          <DialogTitle>{assembly ? \"Edit Assembly Task\" : \"Create Assembly Task\"}</DialogTitle>\n          <DialogDescription>\n            {assembly ? \"Update the assembly task information below.\" : \"Fill in the details for the new assembly task.\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Task Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter task name\" {...field} data-testid=\"assembly-name-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Type</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} data-testid=\"assembly-type-select\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"component\">Component</SelectItem>\n                        <SelectItem value=\"kit\">Kit</SelectItem>\n                        <SelectItem value=\"full_machine\">Full Machine</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} data-testid=\"assembly-priority-select\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"normal\">Normal</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} data-testid=\"assembly-status-select\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                        <SelectItem value=\"completed\">Completed</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"assigned_to\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assigned To</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Technician name\" {...field} value={field.value || \"\"} data-testid=\"assembly-assigned-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"estimated_time\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Estimated Time (minutes)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        placeholder=\"60\"\n                        {...field}\n                        value={field.value || 0}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"assembly-time-input\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"components\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Components (JSON format)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder='{\"screws\": 4, \"panels\": 2, \"motors\": 1}'\n                      className=\"min-h-[100px] font-mono text-sm\"\n                      value={componentsString}\n                      onChange={(e) => field.onChange(e.target.value)}\n                      data-testid=\"assembly-components-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Additional notes...\"\n                      className=\"min-h-[80px]\"\n                      {...field}\n                      value={field.value || \"\"}\n                      data-testid=\"assembly-notes-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"assembly-form-cancel\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading} data-testid=\"assembly-form-submit\">\n                {isLoading ? \"Saving...\" : assembly ? \"Update Task\" : \"Create Task\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9759},"client/src/components/assembly/AssemblyTable.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { MoreVertical, Wrench } from \"lucide-react\";\nimport type { Assembly } from \"@shared/schema\";\n\ninterface AssemblyTableProps {\n  assemblies: Assembly[];\n  isLoading: boolean;\n  onEdit: (assembly: Assembly) => void;\n}\n\nexport default function AssemblyTable({ assemblies, isLoading, onEdit }: AssemblyTableProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"glass-effect overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Task Name</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Priority</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Assigned To</TableHead>\n                <TableHead>Est. Time</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {Array.from({ length: 5 }).map((_, i) => (\n                <TableRow key={i}>\n                  <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-8\" /></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      pending: \"outline\",\n      in_progress: \"secondary\",\n      completed: \"default\", \n      cancelled: \"destructive\",\n    } as const;\n\n    return (\n      <Badge variant={variants[status as keyof typeof variants] || \"outline\"}>\n        {status.replace('_', ' ').charAt(0).toUpperCase() + status.replace('_', ' ').slice(1)}\n      </Badge>\n    );\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const variants = {\n      low: \"outline\",\n      normal: \"secondary\",\n      high: \"destructive\",\n      urgent: \"destructive\",\n    } as const;\n\n    return (\n      <Badge variant={variants[priority as keyof typeof variants] || \"outline\"}>\n        {priority.charAt(0).toUpperCase() + priority.slice(1)}\n      </Badge>\n    );\n  };\n\n  const formatEstimatedTime = (minutes: number | null) => {\n    if (!minutes) return \"Not set\";\n    if (minutes < 60) return `${minutes}m`;\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"N/A\";\n    const dateObj = date instanceof Date ? date : new Date(date);\n    return dateObj.toLocaleDateString();\n  };\n\n  if (assemblies.length === 0) {\n    return (\n      <Card className=\"glass-effect p-12\">\n        <div className=\"text-center\">\n          <Wrench className=\"mx-auto mb-4 h-16 w-16 text-muted-foreground\" />\n          <h3 className=\"mb-2 text-lg font-semibold\">No assembly tasks</h3>\n          <p className=\"text-muted-foreground\">Assembly tasks will appear here when created.</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"glass-effect overflow-hidden\" data-testid=\"assembly-table\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader className=\"bg-muted/50\">\n            <TableRow>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Task Name\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Type\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Priority\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Status\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Assigned To\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Est. Time\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Created\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Actions\n              </TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody className=\"divide-y divide-border\">\n            {assemblies.map((assembly) => (\n              <TableRow\n                key={assembly.id}\n                className=\"transition-colors hover:bg-muted/30\"\n                data-testid={`assembly-row-${assembly.id}`}\n              >\n                <TableCell className=\"px-6 py-4\">\n                  <div>\n                    <span className=\"font-semibold text-foreground\">{assembly.name}</span>\n                    {assembly.notes && (\n                      <p className=\"text-xs text-muted-foreground mt-1 line-clamp-1\">\n                        {assembly.notes}\n                      </p>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell className=\"px-6 py-4\">\n                  <span className=\"text-sm text-foreground capitalize\">\n                    {assembly.type.replace('_', ' ')}\n                  </span>\n                </TableCell>\n                <TableCell className=\"px-6 py-4\">\n                  {getPriorityBadge(assembly.priority)}\n                </TableCell>\n                <TableCell className=\"px-6 py-4\">\n                  {getStatusBadge(assembly.status)}\n                </TableCell>\n                <TableCell className=\"px-6 py-4 text-sm text-foreground\">\n                  {assembly.assigned_to || \"Unassigned\"}\n                </TableCell>\n                <TableCell className=\"px-6 py-4 text-sm text-muted-foreground\">\n                  {formatEstimatedTime(assembly.estimated_time)}\n                </TableCell>\n                <TableCell className=\"px-6 py-4 text-sm text-muted-foreground\">\n                  {formatDate(assembly.created_at)}\n                </TableCell>\n                <TableCell className=\"px-6 py-4\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => onEdit(assembly)}\n                    data-testid={`edit-assembly-${assembly.id}`}\n                  >\n                    <MoreVertical className=\"h-4 w-4\" />\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":7351},"client/src/components/categories/CategoryForm.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { insertCategorySchema, type Category, type InsertCategory } from \"@shared/schema\";\n\ninterface CategoryFormProps {\n  category?: Category | null;\n  onSubmit: (data: InsertCategory) => void;\n  onCancel: () => void;\n  isLoading: boolean;\n}\n\nexport default function CategoryForm({ category, onSubmit, onCancel, isLoading }: CategoryFormProps) {\n  const form = useForm<InsertCategory>({\n    resolver: zodResolver(insertCategorySchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (category) {\n      form.reset({\n        name: category.name,\n        description: category.description || \"\",\n      });\n    }\n  }, [category, form]);\n\n  const handleSubmit = (data: InsertCategory) => {\n    onSubmit(data);\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onCancel}>\n      <DialogContent className=\"max-w-md\" data-testid=\"category-form-dialog\">\n        <DialogHeader>\n          <DialogTitle>{category ? \"Edit Category\" : \"Add New Category\"}</DialogTitle>\n          <DialogDescription>\n            {category ? \"Update the category information below.\" : \"Fill in the details for the new category.\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter category name\" {...field} data-testid=\"category-name-input\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter category description...\"\n                      className=\"min-h-[100px]\"\n                      {...field}\n                      value={field.value || \"\"}\n                      data-testid=\"category-description-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"category-form-cancel\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading} data-testid=\"category-form-submit\">\n                {isLoading ? \"Saving...\" : category ? \"Update Category\" : \"Create Category\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3524},"client/src/components/categories/SubcategoryForm.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { insertSubcategorySchema, type Subcategory, type InsertSubcategory, type Category } from \"@shared/schema\";\n\ninterface SubcategoryFormProps {\n  subcategory?: Subcategory | null;\n  categories: Category[];\n  initialCategoryId?: string | null;\n  onSubmit: (data: InsertSubcategory) => void;\n  onCancel: () => void;\n  isLoading: boolean;\n}\n\nexport default function SubcategoryForm({ \n  subcategory, \n  categories, \n  initialCategoryId,\n  onSubmit, \n  onCancel, \n  isLoading \n}: SubcategoryFormProps) {\n  const form = useForm<InsertSubcategory>({\n    resolver: zodResolver(insertSubcategorySchema),\n    defaultValues: {\n      category_id: initialCategoryId || \"\",\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (subcategory) {\n      form.reset({\n        category_id: subcategory.category_id,\n        name: subcategory.name,\n        description: subcategory.description || \"\",\n      });\n    } else if (initialCategoryId) {\n      form.setValue(\"category_id\", initialCategoryId);\n    }\n  }, [subcategory, initialCategoryId, form]);\n\n  const handleSubmit = (data: InsertSubcategory) => {\n    onSubmit(data);\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onCancel}>\n      <DialogContent className=\"max-w-md\" data-testid=\"subcategory-form-dialog\">\n        <DialogHeader>\n          <DialogTitle>{subcategory ? \"Edit Subcategory\" : \"Add New Subcategory\"}</DialogTitle>\n          <DialogDescription>\n            {subcategory ? \"Update the subcategory information below.\" : \"Fill in the details for the new subcategory.\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"category_id\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Parent Category</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value} data-testid=\"subcategory-category-select\">\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select parent category\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {categories.map((cat) => (\n                        <SelectItem key={cat.id} value={cat.id}>\n                          {cat.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subcategory Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter subcategory name\" {...field} data-testid=\"subcategory-name-input\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter subcategory description...\"\n                      className=\"min-h-[100px]\"\n                      {...field}\n                      value={field.value || \"\"}\n                      data-testid=\"subcategory-description-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"subcategory-form-cancel\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading} data-testid=\"subcategory-form-submit\">\n                {isLoading ? \"Saving...\" : subcategory ? \"Update Subcategory\" : \"Create Subcategory\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5027},"client/src/components/dashboard/RecentOrders.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ShoppingCart } from \"lucide-react\";\nimport type { Order } from \"@shared/schema\";\n\ninterface RecentOrdersProps {\n  orders: Order[];\n  isLoading: boolean;\n}\n\nexport default function RecentOrders({ orders, isLoading }: RecentOrdersProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"glass-effect border-0 shadow-xl\">\n        <CardHeader className=\"pb-4\">\n          <Skeleton className=\"h-8 w-48\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-16 w-full\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const recentOrders = orders?.slice(0, 4) || [];\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      completed: \"default\",\n      pending: \"outline\",\n      processing: \"secondary\",\n      failed: \"destructive\",\n      cancelled: \"secondary\",\n    } as const;\n\n    return (\n      <Badge variant={variants[status as keyof typeof variants] || \"outline\"}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const formatTime = (date: Date | null) => {\n    if (!date) return \"N/A\";\n    const dateObj = date instanceof Date ? date : new Date(date);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - dateObj.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return \"Just now\";\n    if (diffInMinutes < 60) return `${diffInMinutes} mins ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} hours ago`;\n    return dateObj.toLocaleDateString();\n  };\n\n  return (\n    <Card className=\"glass-effect border-0 shadow-xl\" data-testid=\"recent-orders-card\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center gap-3 mb-4\">\n          <div className=\"flex h-10 w-10 items-center justify-center rounded-xl bg-gradient-to-br from-purple-500 to-purple-600\">\n            <ShoppingCart className=\"h-5 w-5 text-white\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-foreground\">Recent Orders</h3>\n            <p className=\"text-xs text-muted-foreground\">Latest transactions</p>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      \n      {recentOrders.length === 0 ? (\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <ShoppingCart className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">No recent orders found</p>\n          </div>\n        </CardContent>\n      ) : (\n        <>\n          <div className=\"divide-y divide-border\">\n            {recentOrders.map((order) => (\n              <div\n                key={order.id}\n                className=\"p-4 transition-colors hover:bg-muted/30\"\n                data-testid={`order-${order.order_number}`}\n              >\n                <div className=\"mb-2 flex items-start justify-between\">\n                  <div>\n                    <p className=\"text-sm font-semibold text-foreground\">\n                      #{order.order_number}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {order.items_count} items\n                    </p>\n                  </div>\n                  {getStatusBadge(order.status)}\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-sm font-semibold text-foreground\">\n                    ${parseFloat(order.total_amount).toFixed(2)}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {formatTime(order.created_at)}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"border-t border-border p-4\">\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"view-all-orders-button\">\n              View All Orders\n            </Button>\n          </div>\n        </>\n      )}\n    </Card>\n  );\n}\n","size_bytes":4326},"client/src/components/dashboard/RevenueChart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { TrendingUp } from \"lucide-react\";\n\nexport default function RevenueChart() {\n  return (\n    <Card className=\"glass-effect border-0 shadow-xl\" data-testid=\"revenue-chart-card\">\n      <CardHeader className=\"border-b border-border pb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"flex h-10 w-10 items-center justify-center rounded-xl bg-gradient-to-br from-blue-500 to-blue-600\">\n              <TrendingUp className=\"h-5 w-5 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground\">Revenue Analytics</h3>\n              <p className=\"text-xs text-muted-foreground\">Last 7 days performance</p>\n            </div>\n          </div>\n          <Select defaultValue=\"7days\" data-testid=\"revenue-chart-period-select\">\n            <SelectTrigger className=\"w-auto\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7days\">Last 7 days</SelectItem>\n              <SelectItem value=\"30days\">Last 30 days</SelectItem>\n              <SelectItem value=\"90days\">Last 90 days</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {/* SVG Chart */}\n        <div className=\"relative h-[300px] w-full\" data-testid=\"revenue-chart-svg\">\n          <svg className=\"h-full w-full\" viewBox=\"0 0 800 300\">\n            {/* Grid lines */}\n            <line x1=\"50\" y1=\"0\" x2=\"50\" y2=\"250\" stroke=\"hsl(var(--border))\" strokeWidth=\"1\" />\n            <line x1=\"50\" y1=\"250\" x2=\"800\" y2=\"250\" stroke=\"hsl(var(--border))\" strokeWidth=\"1\" />\n            \n            {/* Horizontal grid */}\n            <line x1=\"50\" y1=\"50\" x2=\"800\" y2=\"50\" stroke=\"hsl(var(--border))\" strokeWidth=\"0.5\" strokeDasharray=\"5,5\" />\n            <line x1=\"50\" y1=\"125\" x2=\"800\" y2=\"125\" stroke=\"hsl(var(--border))\" strokeWidth=\"0.5\" strokeDasharray=\"5,5\" />\n            <line x1=\"50\" y1=\"200\" x2=\"800\" y2=\"200\" stroke=\"hsl(var(--border))\" strokeWidth=\"0.5\" strokeDasharray=\"5,5\" />\n            \n            {/* Revenue line chart */}\n            <polyline \n              points=\"50,150 150,120 250,140 350,90 450,110 550,80 650,100 750,60\" \n              fill=\"none\" \n              stroke=\"hsl(var(--primary))\" \n              strokeWidth=\"3\" \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\"\n            />\n            \n            {/* Area under curve */}\n            <path \n              d=\"M 50,150 L 150,120 L 250,140 L 350,90 L 450,110 L 550,80 L 650,100 L 750,60 L 750,250 L 50,250 Z\" \n              fill=\"url(#gradient)\" \n              opacity=\"0.2\"\n            />\n            \n            {/* Data points */}\n            <circle cx=\"50\" cy=\"150\" r=\"4\" fill=\"hsl(var(--primary))\" />\n            <circle cx=\"150\" cy=\"120\" r=\"4\" fill=\"hsl(var(--primary))\" />\n            <circle cx=\"250\" cy=\"140\" r=\"4\" fill=\"hsl(var(--primary))\" />\n            <circle cx=\"350\" cy=\"90\" r=\"4\" fill=\"hsl(var(--primary))\" />\n            <circle cx=\"450\" cy=\"110\" r=\"4\" fill=\"hsl(var(--primary))\" />\n            <circle cx=\"550\" cy=\"80\" r=\"4\" fill=\"hsl(var(--primary))\" />\n            <circle cx=\"650\" cy=\"100\" r=\"4\" fill=\"hsl(var(--primary))\" />\n            <circle cx=\"750\" cy=\"60\" r=\"4\" fill=\"hsl(var(--primary))\" />\n            \n            {/* Labels */}\n            <text x=\"50\" y=\"270\" textAnchor=\"middle\" fill=\"hsl(var(--muted-foreground))\" fontSize=\"12\">Mon</text>\n            <text x=\"150\" y=\"270\" textAnchor=\"middle\" fill=\"hsl(var(--muted-foreground))\" fontSize=\"12\">Tue</text>\n            <text x=\"250\" y=\"270\" textAnchor=\"middle\" fill=\"hsl(var(--muted-foreground))\" fontSize=\"12\">Wed</text>\n            <text x=\"350\" y=\"270\" textAnchor=\"middle\" fill=\"hsl(var(--muted-foreground))\" fontSize=\"12\">Thu</text>\n            <text x=\"450\" y=\"270\" textAnchor=\"middle\" fill=\"hsl(var(--muted-foreground))\" fontSize=\"12\">Fri</text>\n            <text x=\"550\" y=\"270\" textAnchor=\"middle\" fill=\"hsl(var(--muted-foreground))\" fontSize=\"12\">Sat</text>\n            <text x=\"650\" y=\"270\" textAnchor=\"middle\" fill=\"hsl(var(--muted-foreground))\" fontSize=\"12\">Sun</text>\n            \n            <defs>\n              <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                <stop offset=\"0%\" style={{ stopColor: \"hsl(var(--primary))\", stopOpacity: 1 }} />\n                <stop offset=\"100%\" style={{ stopColor: \"hsl(var(--primary))\", stopOpacity: 0 }} />\n              </linearGradient>\n            </defs>\n          </svg>\n        </div>\n\n        {/* Summary Stats */}\n        <div className=\"mt-6 grid grid-cols-3 gap-4 border-t border-border pt-6\">\n          <div>\n            <p className=\"mb-1 text-xs text-muted-foreground\">Average</p>\n            <p className=\"text-lg font-semibold text-foreground\">$7,755</p>\n          </div>\n          <div>\n            <p className=\"mb-1 text-xs text-muted-foreground\">Highest</p>\n            <p className=\"text-lg font-semibold text-green-600\">$9,240</p>\n          </div>\n          <div>\n            <p className=\"mb-1 text-xs text-muted-foreground\">Lowest</p>\n            <p className=\"text-lg font-semibold text-red-600\">$6,180</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5524},"client/src/components/dashboard/StatsGrid.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Package, ShoppingCart, Activity, DollarSign, TrendingUp } from \"lucide-react\";\n\ninterface StatsGridProps {\n  stats: any;\n  isLoading: boolean;\n}\n\nexport default function StatsGrid({ stats, isLoading }: StatsGridProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <Card key={i} className=\"glass-effect p-6\">\n            <Skeleton className=\"h-20 w-full\" />\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: \"Total Products\",\n      value: stats?.totalProducts || \"0\",\n      icon: Package,\n      gradient: \"from-blue-500 to-blue-600\",\n      badge: \"+12%\",\n      badgeVariant: \"secondary\" as const,\n      trend: \"12% increase from last month\",\n      testId: \"stat-products\",\n    },\n    {\n      title: \"Total Orders\",\n      value: stats?.totalOrders || \"0\",\n      icon: ShoppingCart,\n      gradient: \"from-purple-500 to-purple-600\",\n      badge: `Pending: ${stats?.pendingOrders || \"0\"}`,\n      badgeVariant: \"outline\" as const,\n      trend: \"8% increase from last week\",\n      testId: \"stat-orders\",\n    },\n    {\n      title: \"Active Machines\",\n      value: `${stats?.activeMachines || \"0\"}/${stats?.totalMachines || \"0\"}`,\n      icon: Activity,\n      gradient: \"from-green-500 to-green-600\",\n      badge: `Online: ${stats?.activeMachines || \"0\"}`,\n      badgeVariant: \"secondary\" as const,\n      trend: `${((stats?.activeMachines / stats?.totalMachines) * 100).toFixed(1) || \"0\"}% uptime`,\n      testId: \"stat-machines\",\n    },\n    {\n      title: \"Total Revenue\",\n      value: `$${stats?.totalRevenue?.toLocaleString() || \"0\"}`,\n      icon: DollarSign,\n      gradient: \"from-orange-500 to-orange-600\",\n      badge: \"+24%\",\n      badgeVariant: \"secondary\" as const,\n      trend: \"24% increase from last month\",\n      testId: \"stat-revenue\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4\">\n      {statCards.map((stat) => {\n        const Icon = stat.icon;\n        return (\n          <Card\n            key={stat.title}\n            className=\"glass-effect hover-lift rounded-xl p-6 shadow-xl\"\n            data-testid={stat.testId}\n          >\n            <CardContent className=\"p-0\">\n              <div className=\"mb-4 flex items-start justify-between\">\n                <div className={`flex h-12 w-12 items-center justify-center rounded-xl bg-gradient-to-br ${stat.gradient}`}>\n                  <Icon className=\"h-6 w-6 text-white\" />\n                </div>\n                <Badge variant={stat.badgeVariant}>{stat.badge}</Badge>\n              </div>\n              <h3 className=\"mb-1 text-2xl font-bold text-foreground\" data-testid={`${stat.testId}-value`}>\n                {stat.value}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n              <div className=\"mt-4 flex items-center gap-2 text-xs text-green-600\">\n                <TrendingUp className=\"h-4 w-4\" />\n                <span>{stat.trend}</span>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3352},"client/src/components/deliveries/DeliveriesTable.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Eye, MapPin, Truck } from \"lucide-react\";\nimport type { Delivery } from \"@shared/schema\";\n\ninterface DeliveriesTableProps {\n  deliveries: Delivery[];\n  isLoading: boolean;\n  onTrackDelivery: (delivery: Delivery) => void;\n  onStatusUpdate: (id: string, status: string) => void;\n}\n\nexport default function DeliveriesTable({ \n  deliveries, \n  isLoading, \n  onTrackDelivery, \n  onStatusUpdate \n}: DeliveriesTableProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"glass-effect overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Delivery #</TableHead>\n                <TableHead>Items</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Driver</TableHead>\n                <TableHead>Scheduled</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {Array.from({ length: 5 }).map((_, i) => (\n                <TableRow key={i}>\n                  <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-12\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-8\" /></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      pending: \"outline\",\n      in_transit: \"secondary\",\n      delivered: \"default\",\n      cancelled: \"destructive\",\n    } as const;\n\n    return (\n      <Badge variant={variants[status as keyof typeof variants] || \"outline\"}>\n        {status.replace('_', ' ').charAt(0).toUpperCase() + status.replace('_', ' ').slice(1)}\n      </Badge>\n    );\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"Not scheduled\";\n    const dateObj = date instanceof Date ? date : new Date(date);\n    return dateObj.toLocaleString();\n  };\n\n  const getItemsCount = (items: any) => {\n    if (!items || typeof items !== 'object') return 0;\n    if (Array.isArray(items)) return items.length;\n    return Object.keys(items).length;\n  };\n\n  if (deliveries.length === 0) {\n    return (\n      <Card className=\"glass-effect p-12\">\n        <div className=\"text-center\">\n          <Truck className=\"mx-auto mb-4 h-16 w-16 text-muted-foreground\" />\n          <h3 className=\"mb-2 text-lg font-semibold\">No deliveries scheduled</h3>\n          <p className=\"text-muted-foreground\">Deliveries will appear here when scheduled.</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"glass-effect overflow-hidden\" data-testid=\"deliveries-table\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader className=\"bg-muted/50\">\n            <TableRow>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Delivery #\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Items\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Status\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Driver\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Scheduled\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Actions\n              </TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody className=\"divide-y divide-border\">\n            {deliveries.map((delivery) => (\n              <TableRow\n                key={delivery.id}\n                className=\"transition-colors hover:bg-muted/30\"\n                data-testid={`delivery-row-${delivery.delivery_number}`}\n              >\n                <TableCell className=\"px-6 py-4\">\n                  <span className=\"font-semibold text-foreground\">\n                    #{delivery.delivery_number}\n                  </span>\n                </TableCell>\n                <TableCell className=\"px-6 py-4 text-sm text-muted-foreground\">\n                  {getItemsCount(delivery.items)} items\n                </TableCell>\n                <TableCell className=\"px-6 py-4\">\n                  {getStatusBadge(delivery.status)}\n                </TableCell>\n                <TableCell className=\"px-6 py-4 text-sm text-foreground\">\n                  {delivery.driver_name || \"Not assigned\"}\n                </TableCell>\n                <TableCell className=\"px-6 py-4 text-sm text-muted-foreground\">\n                  {formatDate(delivery.delivery_date)}\n                </TableCell>\n                <TableCell className=\"px-6 py-4\">\n                  <div className=\"flex gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => onTrackDelivery(delivery)}\n                      data-testid={`track-delivery-${delivery.delivery_number}`}\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                    {delivery.status === \"pending\" && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onStatusUpdate(delivery.id, \"in_transit\")}\n                        data-testid={`start-delivery-${delivery.delivery_number}`}\n                      >\n                        Start\n                      </Button>\n                    )}\n                    {delivery.status === \"in_transit\" && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onStatusUpdate(delivery.id, \"delivered\")}\n                        data-testid={`complete-delivery-${delivery.delivery_number}`}\n                      >\n                        Complete\n                      </Button>\n                    )}\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":6981},"client/src/components/deliveries/DeliveryFilters.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function DeliveryFilters() {\n  return (\n    <Card className=\"glass-effect\" data-testid=\"delivery-filters\">\n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n          <div>\n            <Label htmlFor=\"delivery-search\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Search\n            </Label>\n            <Input\n              id=\"delivery-search\"\n              type=\"text\"\n              placeholder=\"Delivery #, Driver...\"\n              data-testid=\"delivery-search-input\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"delivery-status\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Status\n            </Label>\n            <Select data-testid=\"delivery-status-select\">\n              <SelectTrigger id=\"delivery-status\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"in_transit\">In Transit</SelectItem>\n                <SelectItem value=\"delivered\">Delivered</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"delivery-date\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Date Range\n            </Label>\n            <Select data-testid=\"delivery-date-select\">\n              <SelectTrigger id=\"delivery-date\">\n                <SelectValue placeholder=\"All Time\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Time</SelectItem>\n                <SelectItem value=\"today\">Today</SelectItem>\n                <SelectItem value=\"week\">This Week</SelectItem>\n                <SelectItem value=\"month\">This Month</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2438},"client/src/components/deliveries/TrackingModal.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { MapPin, Truck, Package, User, Clock, CheckCircle } from \"lucide-react\";\nimport type { Delivery } from \"@shared/schema\";\n\ninterface TrackingModalProps {\n  delivery: Delivery;\n  onClose: () => void;\n}\n\nexport default function TrackingModal({ delivery, onClose }: TrackingModalProps) {\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      pending: \"outline\",\n      in_transit: \"secondary\",\n      delivered: \"default\",\n      cancelled: \"destructive\",\n    } as const;\n\n    return (\n      <Badge variant={variants[status as keyof typeof variants] || \"outline\"}>\n        {status.replace('_', ' ').charAt(0).toUpperCase() + status.replace('_', ' ').slice(1)}\n      </Badge>\n    );\n  };\n\n  const formatDateTime = (date: Date | null) => {\n    if (!date) return \"Not scheduled\";\n    const dateObj = date instanceof Date ? date : new Date(date);\n    return dateObj.toLocaleString();\n  };\n\n  const getItemsArray = (items: any) => {\n    if (!items) return [];\n    if (Array.isArray(items)) return items;\n    if (typeof items === 'object') {\n      return Object.entries(items).map(([key, value]) => ({\n        name: key,\n        quantity: value\n      }));\n    }\n    return [];\n  };\n\n  const getTrackingInfo = (tracking: any) => {\n    if (!tracking || typeof tracking !== 'object') return null;\n    return tracking;\n  };\n\n  const trackingInfo = getTrackingInfo(delivery.tracking_info);\n  const itemsArray = getItemsArray(delivery.items);\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"tracking-modal\">\n        <DialogHeader className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <DialogTitle className=\"text-lg\">Delivery Tracking</DialogTitle>\n              <DialogDescription>#{delivery.delivery_number}</DialogDescription>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {getStatusBadge(delivery.status)}\n            </div>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Delivery Summary */}\n          <div>\n            <h3 className=\"mb-3 text-sm font-semibold text-foreground\">Delivery Information</h3>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <span className=\"text-muted-foreground\">Driver:</span>\n                  <p className=\"font-medium\">{delivery.driver_name || \"Not assigned\"}</p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <span className=\"text-muted-foreground\">Scheduled:</span>\n                  <p className=\"font-medium\">{formatDateTime(delivery.delivery_date)}</p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Package className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <span className=\"text-muted-foreground\">Items:</span>\n                  <p className=\"font-medium\">{itemsArray.length} items</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Items List */}\n          <div>\n            <h3 className=\"mb-3 text-sm font-semibold text-foreground\">Delivery Items</h3>\n            <div className=\"max-h-32 space-y-2 overflow-y-auto\">\n              {itemsArray.length > 0 ? (\n                itemsArray.map((item, index) => (\n                  <div key={index} className=\"flex justify-between rounded-lg bg-muted/30 p-2 text-sm\">\n                    <span className=\"text-foreground\">{item.name || `Item ${index + 1}`}</span>\n                    <span className=\"text-muted-foreground\">\n                      Qty: {item.quantity || 1}\n                    </span>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-muted-foreground\">No items specified</p>\n              )}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Tracking Timeline */}\n          <div>\n            <h3 className=\"mb-3 text-sm font-semibold text-foreground\">Tracking Timeline</h3>\n            <div className=\"space-y-3\">\n              {/* Created */}\n              <div className=\"flex items-start gap-3\">\n                <div className=\"mt-1 h-2 w-2 rounded-full bg-blue-500\"></div>\n                <div className=\"text-sm\">\n                  <p className=\"font-medium\">Delivery Scheduled</p>\n                  <p className=\"text-muted-foreground\">{formatDateTime(delivery.created_at)}</p>\n                </div>\n              </div>\n\n              {/* In Transit */}\n              {delivery.status !== \"pending\" && (\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"mt-1 h-2 w-2 rounded-full bg-orange-500\"></div>\n                  <div className=\"text-sm\">\n                    <p className=\"font-medium\">Out for Delivery</p>\n                    <p className=\"text-muted-foreground\">\n                      {trackingInfo?.started_at ? formatDateTime(trackingInfo.started_at) : \"Status updated\"}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {/* Delivered */}\n              {delivery.status === \"delivered\" && (\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"mt-1 h-2 w-2 rounded-full bg-green-500\"></div>\n                  <div className=\"text-sm\">\n                    <p className=\"font-medium\">Delivered</p>\n                    <p className=\"text-muted-foreground\">\n                      {trackingInfo?.delivered_at ? formatDateTime(trackingInfo.delivered_at) : formatDateTime(delivery.updated_at)}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {/* Cancelled */}\n              {delivery.status === \"cancelled\" && (\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"mt-1 h-2 w-2 rounded-full bg-red-500\"></div>\n                  <div className=\"text-sm\">\n                    <p className=\"font-medium\">Delivery Cancelled</p>\n                    <p className=\"text-muted-foreground\">{formatDateTime(delivery.updated_at)}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Notes */}\n          {delivery.notes && (\n            <>\n              <Separator />\n              <div>\n                <h3 className=\"mb-2 text-sm font-semibold text-foreground\">Notes</h3>\n                <p className=\"text-sm text-muted-foreground\">{delivery.notes}</p>\n              </div>\n            </>\n          )}\n\n          {/* Additional Tracking Info */}\n          {trackingInfo && Object.keys(trackingInfo).length > 0 && (\n            <>\n              <Separator />\n              <div>\n                <h3 className=\"mb-3 text-sm font-semibold text-foreground\">Additional Information</h3>\n                <div className=\"space-y-2 text-sm\">\n                  {Object.entries(trackingInfo).map(([key, value]) => (\n                    <div key={key} className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground capitalize\">\n                        {key.replace('_', ' ')}:\n                      </span>\n                      <span className=\"font-medium\">{String(value)}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n\n        <div className=\"flex justify-end\">\n          <Button onClick={onClose} data-testid=\"close-tracking-modal\">\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8252},"client/src/components/maintenance/MaintenanceForm.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { insertMaintenanceRecordSchema, type MaintenanceRecord, type InsertMaintenanceRecord } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertMaintenanceRecordSchema.extend({\n  scheduled_date: z.string(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface MaintenanceFormProps {\n  record?: MaintenanceRecord | null;\n  onSubmit: (data: InsertMaintenanceRecord) => void;\n  onCancel: () => void;\n  isLoading: boolean;\n}\n\nexport default function MaintenanceForm({ record, onSubmit, onCancel, isLoading }: MaintenanceFormProps) {\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      type: \"routine\",\n      priority: \"normal\",\n      status: \"scheduled\",\n      scheduled_date: \"\",\n      technician: \"\",\n      description: \"\",\n      notes: \"\",\n      cost: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (record) {\n      // Format date for input\n      const scheduledDate = new Date(record.scheduled_date);\n      const formattedDate = scheduledDate.toISOString().slice(0, 16);\n      \n      form.reset({\n        type: record.type,\n        priority: record.priority,\n        status: record.status,\n        scheduled_date: formattedDate,\n        technician: record.technician || \"\",\n        description: record.description || \"\",\n        notes: record.notes || \"\",\n        cost: record.cost || \"\",\n      });\n    }\n  }, [record, form]);\n\n  const handleSubmit = (data: FormData) => {\n    // Convert the date string to Date object for the backend\n    const submissionData: InsertMaintenanceRecord = {\n      ...data,\n      scheduled_date: new Date(data.scheduled_date),\n    };\n    onSubmit(submissionData);\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onCancel}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"maintenance-form-dialog\">\n        <DialogHeader>\n          <DialogTitle>{record ? \"Edit Maintenance Record\" : \"Schedule Maintenance\"}</DialogTitle>\n          <DialogDescription>\n            {record ? \"Update the maintenance record information below.\" : \"Fill in the details for the new maintenance task.\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Type</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} data-testid=\"maintenance-type-select\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"routine\">Routine</SelectItem>\n                        <SelectItem value=\"repair\">Repair</SelectItem>\n                        <SelectItem value=\"inspection\">Inspection</SelectItem>\n                        <SelectItem value=\"cleaning\">Cleaning</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} data-testid=\"maintenance-priority-select\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"normal\">Normal</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} data-testid=\"maintenance-status-select\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                        <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                        <SelectItem value=\"completed\">Completed</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"scheduled_date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Scheduled Date & Time</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"datetime-local\"\n                        {...field}\n                        data-testid=\"maintenance-date-input\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"technician\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Technician</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Technician name\" {...field} value={field.value || \"\"} data-testid=\"maintenance-technician-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"cost\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Cost ($)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        placeholder=\"0.00\"\n                        {...field}\n                        value={field.value || \"\"}\n                        data-testid=\"maintenance-cost-input\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Describe the maintenance task...\"\n                      className=\"min-h-[80px]\"\n                      {...field}\n                      value={field.value || \"\"}\n                      data-testid=\"maintenance-description-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Additional notes...\"\n                      className=\"min-h-[80px]\"\n                      {...field}\n                      value={field.value || \"\"}\n                      data-testid=\"maintenance-notes-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"maintenance-form-cancel\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading} data-testid=\"maintenance-form-submit\">\n                {isLoading ? \"Saving...\" : record ? \"Update Record\" : \"Schedule Maintenance\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9872},"client/src/components/maintenance/MaintenanceTable.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { MoreVertical, Wrench } from \"lucide-react\";\nimport type { MaintenanceRecord } from \"@shared/schema\";\n\ninterface MaintenanceTableProps {\n  records: MaintenanceRecord[];\n  isLoading: boolean;\n  onEdit: (record: MaintenanceRecord) => void;\n}\n\nexport default function MaintenanceTable({ records, isLoading, onEdit }: MaintenanceTableProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"glass-effect overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Type</TableHead>\n                <TableHead>Priority</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Scheduled</TableHead>\n                <TableHead>Technician</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {Array.from({ length: 5 }).map((_, i) => (\n                <TableRow key={i}>\n                  <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-12\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-8\" /></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      scheduled: \"outline\",\n      in_progress: \"secondary\",\n      completed: \"default\",\n      cancelled: \"destructive\",\n    } as const;\n\n    return (\n      <Badge variant={variants[status as keyof typeof variants] || \"outline\"}>\n        {status.replace('_', ' ').charAt(0).toUpperCase() + status.replace('_', ' ').slice(1)}\n      </Badge>\n    );\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const variants = {\n      low: \"outline\",\n      normal: \"secondary\",\n      high: \"destructive\",\n      urgent: \"destructive\",\n    } as const;\n\n    return (\n      <Badge variant={variants[priority as keyof typeof variants] || \"outline\"}>\n        {priority.charAt(0).toUpperCase() + priority.slice(1)}\n      </Badge>\n    );\n  };\n\n  const formatDateTime = (date: Date) => {\n    const dateObj = date instanceof Date ? date : new Date(date);\n    const now = new Date();\n    const isToday = dateObj.toDateString() === now.toDateString();\n    \n    if (isToday) {\n      return `Today, ${dateObj.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    }\n    return dateObj.toLocaleString();\n  };\n\n  if (records.length === 0) {\n    return (\n      <Card className=\"glass-effect p-12\">\n        <div className=\"text-center\">\n          <Wrench className=\"mx-auto mb-4 h-16 w-16 text-muted-foreground\" />\n          <h3 className=\"mb-2 text-lg font-semibold\">No maintenance records</h3>\n          <p className=\"text-muted-foreground\">Maintenance records will appear here when scheduled.</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"glass-effect overflow-hidden\" data-testid=\"maintenance-table\">\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader className=\"bg-muted/50\">\n            <TableRow>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Type\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Priority\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Status\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Scheduled\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Technician\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Cost\n              </TableHead>\n              <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                Actions\n              </TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody className=\"divide-y divide-border\">\n            {records.map((record) => (\n              <TableRow\n                key={record.id}\n                className=\"transition-colors hover:bg-muted/30\"\n                data-testid={`maintenance-row-${record.id}`}\n              >\n                <TableCell className=\"px-6 py-4\">\n                  <span className=\"text-sm text-foreground capitalize\">\n                    {record.type.replace('_', ' ')}\n                  </span>\n                </TableCell>\n                <TableCell className=\"px-6 py-4\">\n                  {getPriorityBadge(record.priority)}\n                </TableCell>\n                <TableCell className=\"px-6 py-4\">\n                  {getStatusBadge(record.status)}\n                </TableCell>\n                <TableCell className=\"px-6 py-4 text-sm text-muted-foreground\">\n                  {formatDateTime(record.scheduled_date)}\n                </TableCell>\n                <TableCell className=\"px-6 py-4 text-sm text-foreground\">\n                  {record.technician || \"Not assigned\"}\n                </TableCell>\n                <TableCell className=\"px-6 py-4 text-sm text-foreground\">\n                  {record.cost ? `$${parseFloat(record.cost).toFixed(2)}` : \"-\"}\n                </TableCell>\n                <TableCell className=\"px-6 py-4\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => onEdit(record)}\n                    data-testid={`edit-maintenance-${record.id}`}\n                  >\n                    <MoreVertical className=\"h-4 w-4\" />\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":6587},"client/src/components/orders/OrderDetailsDrawer.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { X } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Order } from \"@shared/schema\";\n\ninterface OrderDetailsDrawerProps {\n  order: Order;\n  onClose: () => void;\n}\n\nexport default function OrderDetailsDrawer({ order, onClose }: OrderDetailsDrawerProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const isAdmin = user?.role === \"admin\";\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async (newStatus: string) => {\n      await apiRequest(\"PATCH\", `/api/orders/${order.id}/status`, { status: newStatus });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Status updated\",\n        description: \"Order status has been updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusChange = (newStatus: string) => {\n    updateStatusMutation.mutate(newStatus);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      completed: \"default\",\n      pending: \"outline\",\n      paid: \"secondary\",\n      processing: \"secondary\", \n      failed: \"destructive\",\n      cancelled: \"secondary\",\n    } as const;\n\n    return (\n      <Badge variant={variants[status as keyof typeof variants] || \"outline\"}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const formatDateTime = (date: Date | null) => {\n    if (!date) return \"N/A\";\n    const dateObj = date instanceof Date ? date : new Date(date);\n    return dateObj.toLocaleString();\n  };\n\n  return (\n    <Sheet open={true} onOpenChange={onClose}>\n      <SheetContent className=\"w-full sm:max-w-md\" data-testid=\"order-details-drawer\">\n        <SheetHeader className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <SheetTitle className=\"text-lg\">Order Details</SheetTitle>\n              <SheetDescription>#{order.order_number}</SheetDescription>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose} data-testid=\"close-order-details\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {getStatusBadge(order.status)}\n            <span className=\"text-sm text-muted-foreground\">\n              {formatDateTime(order.created_at)}\n            </span>\n          </div>\n\n          {isAdmin && (\n            <div>\n              <h3 className=\"mb-2 text-sm font-semibold text-foreground\">Update Status</h3>\n              <Select \n                value={order.status} \n                onValueChange={handleStatusChange}\n                disabled={updateStatusMutation.isPending}\n              >\n                <SelectTrigger className=\"w-full\" data-testid=\"order-status-select\">\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                  <SelectItem value=\"processing\">Processing</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n        </SheetHeader>\n\n        <div className=\"mt-6 space-y-6\">\n          {/* Order Summary */}\n          <div>\n            <h3 className=\"mb-3 text-sm font-semibold text-foreground\">Order Summary</h3>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Items:</span>\n                <span className=\"font-medium\">{order.items_count}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Payment Method:</span>\n                <span className=\"font-medium\">{order.payment_method || \"Not specified\"}</span>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Customer Information */}\n          {order.customer_info && typeof order.customer_info === 'object' && (\n            <>\n              <div>\n                <h3 className=\"mb-3 text-sm font-semibold text-foreground\">Customer Information</h3>\n                <div className=\"space-y-2 text-sm\">\n                  {Object.entries(order.customer_info as Record<string, any>).map(([key, value]) => {\n                    // Format address objects\n                    if (value && typeof value === 'object' && 'address' in value) {\n                      const addr = value as { address?: string; city?: string; state?: string; zip?: string; country?: string };\n                      const formattedAddress = [\n                        addr.address,\n                        addr.city,\n                        addr.state,\n                        addr.zip,\n                        addr.country\n                      ].filter(Boolean).join(', ');\n                      return (\n                        <div key={key} className=\"flex flex-col gap-1\">\n                          <span className=\"text-muted-foreground capitalize\">{key.replace(/_/g, ' ')}:</span>\n                          <span className=\"font-medium text-foreground\">{formattedAddress || 'N/A'}</span>\n                        </div>\n                      );\n                    }\n                    // Render primitive values normally\n                    return (\n                      <div key={key} className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground capitalize\">{key.replace(/_/g, ' ')}:</span>\n                        <span className=\"font-medium\">{value?.toString() || 'N/A'}</span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n              <Separator />\n            </>\n          )}\n\n          {/* Order Total */}\n          <div>\n            <h3 className=\"mb-3 text-sm font-semibold text-foreground\">Payment Details</h3>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between font-semibold text-foreground\">\n                <span>Total Amount:</span>\n                <span>${parseFloat(order.total_amount).toFixed(2)}</span>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Timeline */}\n          <div>\n            <h3 className=\"mb-3 text-sm font-semibold text-foreground\">Order Timeline</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"mt-1 h-2 w-2 rounded-full bg-blue-500\"></div>\n                <div className=\"text-sm\">\n                  <p className=\"font-medium\">Order Created</p>\n                  <p className=\"text-muted-foreground\">{formatDateTime(order.created_at)}</p>\n                </div>\n              </div>\n              \n              {order.updated_at !== order.created_at && (\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"mt-1 h-2 w-2 rounded-full bg-green-500\"></div>\n                  <div className=\"text-sm\">\n                    <p className=\"font-medium\">Status Updated</p>\n                    <p className=\"text-muted-foreground\">{formatDateTime(order.updated_at)}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":8382},"client/src/components/orders/OrderFilters.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface OrderFiltersProps {\n  filters: {\n    search: string;\n    status: string;\n    dateRange: string;\n  };\n  onFiltersChange: (filters: any) => void;\n}\n\nexport default function OrderFilters({ filters, onFiltersChange }: OrderFiltersProps) {\n  const handleFilterChange = (key: string, value: string) => {\n    onFiltersChange({ ...filters, [key]: value });\n  };\n\n  return (\n    <Card className=\"glass-effect\">\n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n          <div>\n            <Label htmlFor=\"order-search\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Search\n            </Label>\n            <Input\n              id=\"order-search\"\n              type=\"text\"\n              placeholder=\"Order ID...\"\n              value={filters.search}\n              onChange={(e) => handleFilterChange(\"search\", e.target.value)}\n              data-testid=\"order-search-input\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"order-status\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Status\n            </Label>\n            <Select\n              value={filters.status}\n              onValueChange={(value) => handleFilterChange(\"status\", value)}\n              data-testid=\"order-status-select\"\n            >\n              <SelectTrigger id=\"order-status\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"paid\">Paid</SelectItem>\n                <SelectItem value=\"processing\">Processing</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"order-date\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Date Range\n            </Label>\n            <Select\n              value={filters.dateRange}\n              onValueChange={(value) => handleFilterChange(\"dateRange\", value)}\n              data-testid=\"order-date-select\"\n            >\n              <SelectTrigger id=\"order-date\">\n                <SelectValue placeholder=\"All Time\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Time</SelectItem>\n                <SelectItem value=\"today\">Today</SelectItem>\n                <SelectItem value=\"week\">This Week</SelectItem>\n                <SelectItem value=\"month\">This Month</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3215},"client/src/components/orders/OrdersTable.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Eye, ShoppingCart } from \"lucide-react\";\nimport OrderDetailsDrawer from \"./OrderDetailsDrawer\";\nimport type { Order } from \"@shared/schema\";\n\ninterface OrdersTableProps {\n  orders: Order[];\n  isLoading: boolean;\n}\n\nexport default function OrdersTable({ orders, isLoading }: OrdersTableProps) {\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n\n  if (isLoading) {\n    return (\n      <Card className=\"glass-effect overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Order ID</TableHead>\n                <TableHead>Items</TableHead>\n                <TableHead>Total</TableHead>\n                <TableHead>Payment</TableHead>\n                <TableHead>Transfer ID</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Date</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {Array.from({ length: 5 }).map((_, i) => (\n                <TableRow key={i}>\n                  <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-12\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-8\" /></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      completed: \"default\",\n      pending: \"outline\", \n      paid: \"secondary\",\n      processing: \"secondary\",\n      failed: \"destructive\",\n      cancelled: \"secondary\",\n    } as const;\n\n    return (\n      <Badge variant={variants[status as keyof typeof variants] || \"outline\"}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"N/A\";\n    const dateObj = date instanceof Date ? date : new Date(date);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - dateObj.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return \"Just now\";\n    if (diffInMinutes < 60) return `${diffInMinutes} mins ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} hours ago`;\n    return dateObj.toLocaleDateString();\n  };\n\n  if (orders.length === 0) {\n    return (\n      <Card className=\"glass-effect p-12\">\n        <div className=\"text-center\">\n          <ShoppingCart className=\"mx-auto mb-4 h-16 w-16 text-muted-foreground\" />\n          <h3 className=\"mb-2 text-lg font-semibold\">No orders found</h3>\n          <p className=\"text-muted-foreground\">Orders will appear here when customers make purchases.</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card className=\"glass-effect overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader className=\"bg-muted/50\">\n              <TableRow>\n                <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                  Order ID\n                </TableHead>\n                <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                  Items\n                </TableHead>\n                <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                  Total\n                </TableHead>\n                <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                  Payment\n                </TableHead>\n                <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                  Transfer ID\n                </TableHead>\n                <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                  Status\n                </TableHead>\n                <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                  Date\n                </TableHead>\n                <TableHead className=\"px-6 py-4 text-xs font-semibold uppercase tracking-wider\">\n                  Actions\n                </TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody className=\"divide-y divide-border\">\n              {orders.map((order) => (\n                <TableRow\n                  key={order.id}\n                  className=\"transition-colors hover:bg-muted/30\"\n                  data-testid={`order-row-${order.order_number}`}\n                >\n                  <TableCell className=\"px-6 py-4\">\n                    <span className=\"font-semibold text-foreground\">\n                      #{order.order_number}\n                    </span>\n                  </TableCell>\n                  <TableCell className=\"px-6 py-4 text-sm text-muted-foreground\">\n                    {order.items_count} items\n                  </TableCell>\n                  <TableCell className=\"px-6 py-4\">\n                    <span className=\"font-semibold text-foreground\">\n                      ${parseFloat(order.total_amount).toFixed(2)}\n                    </span>\n                  </TableCell>\n                  <TableCell className=\"px-6 py-4 text-sm text-muted-foreground\">\n                    {order.payment_method ? (\n                      <span className=\"capitalize\">\n                        {order.payment_method.replace(/_/g, ' ')}\n                      </span>\n                    ) : (\n                      <span className=\"text-muted-foreground/50\">Not set</span>\n                    )}\n                  </TableCell>\n                  <TableCell className=\"px-6 py-4 text-sm\">\n                    {order.payment_transfer_id ? (\n                      <span className=\"font-mono text-xs\">{order.payment_transfer_id}</span>\n                    ) : (\n                      <span className=\"text-muted-foreground/50\">Pending</span>\n                    )}\n                  </TableCell>\n                  <TableCell className=\"px-6 py-4\">\n                    {getStatusBadge(order.status)}\n                  </TableCell>\n                  <TableCell className=\"px-6 py-4 text-sm text-muted-foreground\">\n                    {formatDate(order.created_at)}\n                  </TableCell>\n                  <TableCell className=\"px-6 py-4\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => setSelectedOrder(order)}\n                      data-testid={`view-order-${order.order_number}`}\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n\n      {selectedOrder && (\n        <OrderDetailsDrawer\n          order={selectedOrder}\n          onClose={() => setSelectedOrder(null)}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":7775},"client/src/components/products/ProductFilters.tsx":{"content":"import { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface ProductFiltersProps {\n  filters: {\n    search: string;\n    category: string;\n    status: string;\n    sortBy: string;\n  };\n  onFiltersChange: (filters: any) => void;\n}\n\nexport default function ProductFilters({ filters, onFiltersChange }: ProductFiltersProps) {\n  const handleFilterChange = (key: string, value: string) => {\n    onFiltersChange({ ...filters, [key]: value });\n  };\n\n  return (\n    <Card className=\"glass-effect\">\n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\n          <div>\n            <Label htmlFor=\"search\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Search\n            </Label>\n            <Input\n              id=\"search\"\n              type=\"text\"\n              placeholder=\"Search products...\"\n              value={filters.search}\n              onChange={(e) => handleFilterChange(\"search\", e.target.value)}\n              data-testid=\"product-search-input\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"category\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Category\n            </Label>\n            <Select\n              value={filters.category}\n              onValueChange={(value) => handleFilterChange(\"category\", value)}\n              data-testid=\"product-category-select\"\n            >\n              <SelectTrigger id=\"category\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                <SelectItem value=\"Beverages\">Beverages</SelectItem>\n                <SelectItem value=\"Snacks\">Snacks</SelectItem>\n                <SelectItem value=\"Healthy Options\">Healthy Options</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <Label htmlFor=\"status\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Status\n            </Label>\n            <Select\n              value={filters.status}\n              onValueChange={(value) => handleFilterChange(\"status\", value)}\n              data-testid=\"product-status-select\"\n            >\n              <SelectTrigger id=\"status\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">In Stock</SelectItem>\n                <SelectItem value=\"out_of_stock\">Out of Stock</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <Label htmlFor=\"sortBy\" className=\"mb-2 block text-sm font-medium text-foreground\">\n              Sort By\n            </Label>\n            <Select\n              value={filters.sortBy}\n              onValueChange={(value) => handleFilterChange(\"sortBy\", value)}\n              data-testid=\"product-sort-select\"\n            >\n              <SelectTrigger id=\"sortBy\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"name\">Name A-Z</SelectItem>\n                <SelectItem value=\"price-asc\">Price: Low to High</SelectItem>\n                <SelectItem value=\"price-desc\">Price: High to Low</SelectItem>\n                <SelectItem value=\"stock\">Stock Level</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3824},"client/src/components/products/ProductForm.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { insertProductSchema, type Product, type InsertProduct, type Category, type Subcategory } from \"@shared/schema\";\n\ninterface ProductFormProps {\n  product?: Product | null;\n  onSubmit: (data: InsertProduct) => void;\n  onCancel: () => void;\n  isLoading: boolean;\n}\n\nexport default function ProductForm({ product, onSubmit, onCancel, isLoading }: ProductFormProps) {\n  const [selectedCategoryId, setSelectedCategoryId] = useState<string>(\"\");\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: subcategories = [] } = useQuery<Subcategory[]>({\n    queryKey: [\"/api/subcategories\", selectedCategoryId],\n    queryFn: async () => {\n      if (!selectedCategoryId) return [];\n      const response = await fetch(`/api/subcategories?categoryId=${selectedCategoryId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch subcategories\");\n      return response.json();\n    },\n    enabled: !!selectedCategoryId,\n  });\n\n  const form = useForm<InsertProduct>({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      name: \"\",\n      category: \"\",\n      category_id: \"\",\n      subcategory_id: \"\",\n      price: \"\",\n      description: \"\",\n      image: \"\",\n      stock: 0,\n      specifications: null,\n      status: \"active\",\n    },\n  });\n\n  useEffect(() => {\n    if (product) {\n      form.reset({\n        name: product.name,\n        category: product.category || \"\",\n        category_id: product.category_id || \"\",\n        subcategory_id: product.subcategory_id || \"\",\n        price: product.price,\n        description: product.description || \"\",\n        image: product.image || \"\",\n        stock: product.stock,\n        specifications: product.specifications || null,\n        status: product.status,\n      });\n      if (product.category_id) {\n        setSelectedCategoryId(product.category_id);\n      }\n    }\n  }, [product, form]);\n\n  const handleSubmit = (data: InsertProduct) => {\n    onSubmit(data);\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onCancel}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"product-form-dialog\">\n        <DialogHeader>\n          <DialogTitle>{product ? \"Edit Product\" : \"Add New Product\"}</DialogTitle>\n          <DialogDescription>\n            {product ? \"Update the product information below.\" : \"Fill in the details for the new product.\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Product Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter product name\" {...field} data-testid=\"product-name-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"category_id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        setSelectedCategoryId(value);\n                        form.setValue(\"subcategory_id\", \"\");\n                      }} \n                      value={field.value || \"\"} \n                      data-testid=\"product-category-select\"\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {categories.map((cat) => (\n                          <SelectItem key={cat.id} value={cat.id}>\n                            {cat.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"subcategory_id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Subcategory</FormLabel>\n                    <Select \n                      onValueChange={field.onChange} \n                      value={field.value || \"\"} \n                      disabled={!selectedCategoryId || subcategories.length === 0}\n                      data-testid=\"product-subcategory-select\"\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder={selectedCategoryId ? \"Select subcategory\" : \"Select category first\"} />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {subcategories.map((subcat) => (\n                          <SelectItem key={subcat.id} value={subcat.id}>\n                            {subcat.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"price\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Price ($)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        placeholder=\"0.00\"\n                        {...field}\n                        data-testid=\"product-price-input\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"stock\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Stock Quantity</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        placeholder=\"0\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"product-stock-input\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} data-testid=\"product-status-select\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"inactive\">Inactive</SelectItem>\n                        <SelectItem value=\"out_of_stock\">Out of Stock</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"image\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Image URL</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"https://example.com/image.jpg\" {...field} value={field.value || \"\"} data-testid=\"product-image-input\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter product description...\"\n                      className=\"min-h-[100px]\"\n                      {...field}\n                      value={field.value || \"\"}\n                      data-testid=\"product-description-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div>\n              <h3 className=\"mb-4 text-sm font-semibold\">Specifications</h3>\n              <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n                <div>\n                  <Label htmlFor=\"spec-dimensions\" className=\"mb-2 block text-sm\">Dimensions</Label>\n                  <Input\n                    id=\"spec-dimensions\"\n                    placeholder=\"e.g., 10 x 5 x 3 cm\"\n                    value={(form.watch(\"specifications\") as any)?.dimensions || \"\"}\n                    onChange={(e) => {\n                      const currentSpecs = form.getValues(\"specifications\") as any || {};\n                      form.setValue(\"specifications\", { ...currentSpecs, dimensions: e.target.value });\n                    }}\n                    data-testid=\"spec-dimensions-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"spec-capacity\" className=\"mb-2 block text-sm\">Capacity</Label>\n                  <Input\n                    id=\"spec-capacity\"\n                    placeholder=\"e.g., 500ml, 2L\"\n                    value={(form.watch(\"specifications\") as any)?.capacity || \"\"}\n                    onChange={(e) => {\n                      const currentSpecs = form.getValues(\"specifications\") as any || {};\n                      form.setValue(\"specifications\", { ...currentSpecs, capacity: e.target.value });\n                    }}\n                    data-testid=\"spec-capacity-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"spec-power\" className=\"mb-2 block text-sm\">Power Consumption</Label>\n                  <Input\n                    id=\"spec-power\"\n                    placeholder=\"e.g., 100W, 2.5kW\"\n                    value={(form.watch(\"specifications\") as any)?.power_consumption || \"\"}\n                    onChange={(e) => {\n                      const currentSpecs = form.getValues(\"specifications\") as any || {};\n                      form.setValue(\"specifications\", { ...currentSpecs, power_consumption: e.target.value });\n                    }}\n                    data-testid=\"spec-power-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"spec-weight\" className=\"mb-2 block text-sm\">Weight</Label>\n                  <Input\n                    id=\"spec-weight\"\n                    placeholder=\"e.g., 2.5kg, 500g\"\n                    value={(form.watch(\"specifications\") as any)?.weight || \"\"}\n                    onChange={(e) => {\n                      const currentSpecs = form.getValues(\"specifications\") as any || {};\n                      form.setValue(\"specifications\", { ...currentSpecs, weight: e.target.value });\n                    }}\n                    data-testid=\"spec-weight-input\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"product-form-cancel\">\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading} data-testid=\"product-form-submit\">\n                {isLoading ? \"Saving...\" : product ? \"Update Product\" : \"Create Product\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13406},"client/src/components/products/ProductGrid.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Edit, Trash2, Package } from \"lucide-react\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductGridProps {\n  products: Product[];\n  isLoading: boolean;\n  onEdit: (product: Product) => void;\n  onDelete: (id: string) => void;\n}\n\nexport default function ProductGrid({ products, isLoading, onEdit, onDelete }: ProductGridProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n        {Array.from({ length: 8 }).map((_, i) => (\n          <Card key={i} className=\"glass-effect overflow-hidden\">\n            <Skeleton className=\"h-48 w-full\" />\n            <div className=\"p-4\">\n              <Skeleton className=\"mb-2 h-6 w-full\" />\n              <Skeleton className=\"mb-3 h-4 w-20\" />\n              <Skeleton className=\"mb-3 h-6 w-16\" />\n              <Skeleton className=\"h-10 w-full\" />\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string, stock: number) => {\n    if (stock === 0) {\n      return <Badge variant=\"destructive\">Out of Stock</Badge>;\n    }\n    if (stock < 20) {\n      return <Badge variant=\"secondary\">Low Stock</Badge>;\n    }\n    return <Badge variant=\"default\">In Stock</Badge>;\n  };\n\n  if (products.length === 0) {\n    return (\n      <div className=\"flex min-h-[400px] flex-col items-center justify-center rounded-lg border-2 border-dashed border-muted-foreground/25\">\n        <Package className=\"mb-4 h-16 w-16 text-muted-foreground\" />\n        <h3 className=\"mb-2 text-lg font-semibold\">No products found</h3>\n        <p className=\"text-muted-foreground\">Try adjusting your filters or add a new product.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n      {products.map((product) => (\n        <Card\n          key={product.id}\n          className=\"glass-effect hover-lift overflow-hidden\"\n          data-testid={`product-card-${product.id}`}\n        >\n          <div className=\"relative h-48 overflow-hidden bg-gradient-to-br from-gray-100 to-gray-200\">\n            {product.image ? (\n              <img\n                src={product.image}\n                alt={product.name}\n                className=\"h-full w-full object-cover\"\n              />\n            ) : (\n              <div className=\"flex h-full items-center justify-center\">\n                <Package className=\"h-16 w-16 text-gray-400\" />\n              </div>\n            )}\n          </div>\n          <CardContent className=\"p-4\">\n            <div className=\"mb-2 flex items-start justify-between\">\n              <h3 className=\"font-semibold text-foreground line-clamp-1\" title={product.name}>\n                {product.name}\n              </h3>\n              {getStatusBadge(product.status, product.stock)}\n            </div>\n            <p className=\"mb-3 text-sm text-muted-foreground\">\n              {product.category} • {product.weight}\n            </p>\n            <div className=\"mb-3 flex items-center justify-between\">\n              <p className=\"text-lg font-bold text-foreground\">\n                ${parseFloat(product.price).toFixed(2)}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Stock: {product.stock}</p>\n            </div>\n            {product.specifications && (\n              <div className=\"mb-3 space-y-1 border-t pt-2\">\n                <p className=\"text-xs font-semibold text-foreground\">Specifications:</p>\n                {(product.specifications as any).Dimensions && (\n                  <p className=\"text-xs text-muted-foreground\">Dimensions: {String((product.specifications as any).Dimensions)}</p>\n                )}\n                {(product.specifications as any).Capacity && (\n                  <p className=\"text-xs text-muted-foreground\">Capacity: {String((product.specifications as any).Capacity)}</p>\n                )}\n                {(product.specifications as any)[\"Power Consumption\"] && (\n                  <p className=\"text-xs text-muted-foreground\">Power: {String((product.specifications as any)[\"Power Consumption\"])}</p>\n                )}\n                {(product.specifications as any).Weight && (\n                  <p className=\"text-xs text-muted-foreground\">Weight: {String((product.specifications as any).Weight)}</p>\n                )}\n              </div>\n            )}\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => onEdit(product)}\n                data-testid={`edit-product-${product.id}`}\n              >\n                <Edit className=\"mr-2 h-4 w-4\" />\n                Edit\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => onDelete(product.id)}\n                data-testid={`delete-product-${product.id}`}\n              >\n                <Trash2 className=\"h-4 w-4 text-destructive\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":5332},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, RegisterData>;\n};\n\ntype LoginData = {\n  username: string;\n  password: string;\n};\n\ntype RegisterData = {\n  username: string;\n  email: string;\n  password: string;\n  role?: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: `Logged in as ${user.username}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Account created!\",\n        description: `Welcome ${user.username}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3242},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n  allowedRoles = [\"admin\", \"customer\"],\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n  allowedRoles?: string[];\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  // Check if user has required role\n  if (!allowedRoles.includes(user.role)) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path}><Component /></Route>;\n}\n","size_bytes":944},"client/src/pages/AuthPage.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Package, Loader2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { user, loginMutation, registerMutation } = useAuth();\n  const { toast } = useToast();\n\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({ \n    username: \"\", \n    email: \"\", \n    password: \"\", \n    confirmPassword: \"\" \n  });\n  const [forgotEmail, setForgotEmail] = useState(\"\");\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [isSendingReset, setIsSendingReset] = useState(false);\n\n  // Capture redirect URL once when component mounts to preserve query params\n  const redirectUrl = useMemo(() => {\n    const params = new URLSearchParams(window.location.search);\n    const productId = params.get(\"product\") || params.get(\"product_id\");\n    \n    if (productId) {\n      const paramName = params.get(\"product_id\") ? \"product_id\" : \"product\";\n      return `/checkout?${paramName}=${productId}`;\n    }\n    \n    return \"/\";\n  }, []); // Empty dependency array ensures this only runs once\n\n  // Redirect if user is already logged in\n  useEffect(() => {\n    if (user) {\n      setLocation(redirectUrl);\n    }\n  }, [user, redirectUrl, setLocation]);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (registerData.password !== registerData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const { confirmPassword, ...data } = registerData;\n    registerMutation.mutate(data);\n  };\n\n  const handleForgotPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSendingReset(true);\n    \n    try {\n      await apiRequest(\"POST\", \"/api/forgot-password\", { email: forgotEmail });\n      toast({\n        title: \"Reset email sent\",\n        description: \"If an account exists with this email, you'll receive password reset instructions.\",\n      });\n      setShowForgotPassword(false);\n      setForgotEmail(\"\");\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSendingReset(false);\n    }\n  };\n\n  if (showForgotPassword) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-blue-50 to-purple-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Forgot Password</CardTitle>\n            <CardDescription>\n              Enter your email address and we'll send you instructions to reset your password\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleForgotPassword} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"forgot-email\">Email</Label>\n                <Input\n                  id=\"forgot-email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={forgotEmail}\n                  onChange={(e) => setForgotEmail(e.target.value)}\n                  required\n                  data-testid=\"input-forgot-email\"\n                />\n              </div>\n              <div className=\"flex gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setShowForgotPassword(false)}\n                  data-testid=\"button-cancel-forgot-password\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1\"\n                  disabled={isSendingReset}\n                  data-testid=\"button-submit-forgot-password\"\n                >\n                  {isSendingReset ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Sending...\n                    </>\n                  ) : (\n                    \"Send Reset Link\"\n                  )}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen grid lg:grid-cols-2\">\n      {/* Left side - Form */}\n      <div className=\"flex items-center justify-center p-8\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <div className=\"flex items-center gap-3 mb-4\">\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-xl bg-gradient-to-br from-blue-500 to-blue-600\">\n                <Package className=\"h-7 w-7 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold\">VendingPro</h1>\n                <p className=\"text-sm text-muted-foreground\">Management Dashboard</p>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n                <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"login\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-username\">Username or Email</Label>\n                    <Input\n                      id=\"login-username\"\n                      type=\"text\"\n                      placeholder=\"Enter your username or email\"\n                      value={loginData.username}\n                      onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\n                      required\n                      data-testid=\"input-login-username\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <Input\n                      id=\"login-password\"\n                      type=\"password\"\n                      placeholder=\"Enter your password\"\n                      value={loginData.password}\n                      onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                      required\n                      data-testid=\"input-login-password\"\n                    />\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"link\"\n                    className=\"px-0 h-auto\"\n                    onClick={() => setShowForgotPassword(true)}\n                    data-testid=\"button-forgot-password\"\n                  >\n                    Forgot password?\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-login\"\n                  >\n                    {loginMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Logging in...\n                      </>\n                    ) : (\n                      \"Login\"\n                    )}\n                  </Button>\n                </form>\n              </TabsContent>\n              \n              <TabsContent value=\"register\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-username\">Username</Label>\n                    <Input\n                      id=\"register-username\"\n                      type=\"text\"\n                      placeholder=\"Choose a username\"\n                      value={registerData.username}\n                      onChange={(e) => setRegisterData({ ...registerData, username: e.target.value })}\n                      required\n                      data-testid=\"input-register-username\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-email\">Email</Label>\n                    <Input\n                      id=\"register-email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={registerData.email}\n                      onChange={(e) => setRegisterData({ ...registerData, email: e.target.value })}\n                      required\n                      data-testid=\"input-register-email\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-password\">Password</Label>\n                    <Input\n                      id=\"register-password\"\n                      type=\"password\"\n                      placeholder=\"Choose a password\"\n                      value={registerData.password}\n                      onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}\n                      required\n                      data-testid=\"input-register-password\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-confirm-password\">Confirm Password</Label>\n                    <Input\n                      id=\"register-confirm-password\"\n                      type=\"password\"\n                      placeholder=\"Confirm your password\"\n                      value={registerData.confirmPassword}\n                      onChange={(e) => setRegisterData({ ...registerData, confirmPassword: e.target.value })}\n                      required\n                      data-testid=\"input-register-confirm-password\"\n                    />\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={registerMutation.isPending}\n                    data-testid=\"button-register\"\n                  >\n                    {registerMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Creating account...\n                      </>\n                    ) : (\n                      \"Create Account\"\n                    )}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Right side - Hero */}\n      <div className=\"hidden lg:flex items-center justify-center p-12 bg-gradient-to-br from-blue-500 to-purple-600\">\n        <div className=\"max-w-md text-white\">\n          <h2 className=\"text-4xl font-bold mb-6\">Welcome to VendingPro</h2>\n          <p className=\"text-lg text-blue-50 mb-8\">\n            Manage your vending machine network with ease. Track inventory, monitor sales, \n            schedule maintenance, and grow your business efficiently.\n          </p>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"h-8 w-8 rounded-lg bg-white/20 flex items-center justify-center flex-shrink-0\">\n                ✓\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Real-time Monitoring</h3>\n                <p className=\"text-sm text-blue-50\">Track machine status, sales, and inventory in real-time</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"h-8 w-8 rounded-lg bg-white/20 flex items-center justify-center flex-shrink-0\">\n                ✓\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Smart Inventory</h3>\n                <p className=\"text-sm text-blue-50\">Automated restocking alerts and delivery scheduling</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"h-8 w-8 rounded-lg bg-white/20 flex items-center justify-center flex-shrink-0\">\n                ✓\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Maintenance Made Easy</h3>\n                <p className=\"text-sm text-blue-50\">Schedule and track maintenance tasks efficiently</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13393},"client/src/pages/OrderTrack.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Package, CheckCircle2, Clock, XCircle, Loader2 } from \"lucide-react\";\nimport type { Order } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { format } from \"date-fns\";\n\nexport default function OrderTrack() {\n  const { user } = useAuth();\n  const [searchOrderNumber, setSearchOrderNumber] = useState(\"\");\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n\n  const { data: userOrders = [], isLoading: isLoadingUserOrders } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n    enabled: !!user,\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!searchOrderNumber.trim()) return;\n\n    const order = userOrders.find(\n      (o) => o.order_number.toLowerCase() === searchOrderNumber.toLowerCase()\n    );\n    \n    if (order) {\n      setSelectedOrder(order);\n    } else {\n      setSelectedOrder(null);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <CheckCircle2 className=\"h-5 w-5 text-green-500\" />;\n      case \"pending\":\n      case \"processing\":\n        return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n      case \"failed\":\n      case \"cancelled\":\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <Package className=\"h-5 w-5 text-blue-500\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      completed: \"default\",\n      pending: \"secondary\",\n      processing: \"secondary\",\n      paid: \"default\",\n      failed: \"destructive\",\n      cancelled: \"destructive\",\n    };\n\n    return (\n      <Badge variant={variants[status] || \"outline\"} data-testid={`badge-status-${status}`}>\n        {status}\n      </Badge>\n    );\n  };\n\n  const getStatusSteps = (status: string) => {\n    const allSteps = [\"pending\", \"paid\", \"processing\", \"completed\"];\n    const currentIndex = allSteps.indexOf(status);\n    \n    return allSteps.map((step, index) => ({\n      label: step.charAt(0).toUpperCase() + step.slice(1),\n      completed: index <= currentIndex,\n      active: step === status,\n    }));\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"order-track-page\">\n      <div>\n        <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n          <Package className=\"h-8 w-8\" />\n          Track Order\n        </h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Enter your order number to track your order status\n        </p>\n      </div>\n\n      {/* Search Order */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Search Order</CardTitle>\n          <CardDescription>Enter your order number to track your order</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSearch} className=\"flex gap-2\">\n            <Input\n              type=\"text\"\n              placeholder=\"Enter order number (e.g., ORD-001)\"\n              value={searchOrderNumber}\n              onChange={(e) => setSearchOrderNumber(e.target.value)}\n              data-testid=\"input-search-order\"\n            />\n            <Button type=\"submit\" data-testid=\"button-search-order\">\n              <Search className=\"h-4 w-4 mr-2\" />\n              Search\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Order Details */}\n      {selectedOrder && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Order Details</span>\n              {getStatusBadge(selectedOrder.status)}\n            </CardTitle>\n            <CardDescription>Order #{selectedOrder.order_number}</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Order Date</p>\n                <p className=\"font-semibold\" data-testid=\"text-order-date\">\n                  {selectedOrder.created_at ? format(new Date(selectedOrder.created_at), \"PPP\") : \"N/A\"}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Amount</p>\n                <p className=\"font-semibold text-lg\" data-testid=\"text-order-total\">\n                  ${selectedOrder.total_amount}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Items Count</p>\n                <p className=\"font-semibold\" data-testid=\"text-items-count\">\n                  {selectedOrder.items_count} items\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Payment Method</p>\n                <p className=\"font-semibold\" data-testid=\"text-payment-method\">\n                  {selectedOrder.payment_method || \"N/A\"}\n                </p>\n              </div>\n            </div>\n\n            {/* Status Timeline */}\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-4\">Order Progress</p>\n              <div className=\"flex items-center justify-between\">\n                {getStatusSteps(selectedOrder.status).map((step, index, array) => (\n                  <div key={step.label} className=\"flex-1 flex items-center\">\n                    <div className=\"flex flex-col items-center flex-1\">\n                      <div\n                        className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                          step.completed\n                            ? \"bg-blue-500 text-white\"\n                            : \"bg-gray-200 text-gray-400\"\n                        }`}\n                      >\n                        {step.completed ? \"✓\" : index + 1}\n                      </div>\n                      <p\n                        className={`text-xs mt-2 ${\n                          step.active ? \"font-semibold\" : \"text-muted-foreground\"\n                        }`}\n                      >\n                        {step.label}\n                      </p>\n                    </div>\n                    {index < array.length - 1 && (\n                      <div\n                        className={`h-1 flex-1 ${\n                          step.completed ? \"bg-blue-500\" : \"bg-gray-200\"\n                        }`}\n                      />\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* My Recent Orders (for logged in users) */}\n      {user && (\n        <Card>\n          <CardHeader>\n            <CardTitle>My Recent Orders</CardTitle>\n            <CardDescription>Your order history</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoadingUserOrders ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : userOrders.length > 0 ? (\n              <div className=\"space-y-3\">\n                {userOrders.slice(0, 5).map((order) => (\n                  <div\n                    key={order.id}\n                    className=\"flex items-center justify-between p-4 rounded-lg border hover:bg-muted cursor-pointer transition-colors\"\n                    onClick={() => {\n                      setSelectedOrder(order);\n                      setSearchOrderNumber(order.order_number);\n                    }}\n                    data-testid={`order-item-${order.order_number}`}\n                  >\n                    <div className=\"flex items-center gap-4\">\n                      {getStatusIcon(order.status)}\n                      <div>\n                        <p className=\"font-semibold\">{order.order_number}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {order.created_at ? format(new Date(order.created_at), \"PP\") : \"N/A\"}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold\">${order.total_amount}</p>\n                      {getStatusBadge(order.status)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No orders found\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":8983},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // passport.use(\n  //   new LocalStrategy(async (username, password, done) => {\n  //     const user = await storage.getUserByUsername(username);\n  //     if (!user || !(await comparePasswords(password, user.password))) {\n  //       return done(null, false);\n  //     } else {\n  //       return done(null, user);\n  //     }\n  //   }),\n  // );\n\n  // passport.serializeUser((user, done) => done(null, user.id));\n  // passport.deserializeUser(async (id: string, done) => {\n  //   const user = await storage.getUser(id);\n  //   done(null, user);\n  // });\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const isEmail = username.includes(\"@\");\n        const user = isEmail\n          ? await storage.getUserByEmail(username)\n          : await storage.getUserByUsername(username);\n\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false, { message: \"Invalid credentials\" });\n        }\n\n        return done(null, user);\n      } catch (err) {\n        return done(err);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUserByUsername = await storage.getUserByUsername(\n      req.body.username,\n    );\n    if (existingUserByUsername) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const existingUserByEmail = await storage.getUserByEmail(req.body.email);\n    if (existingUserByEmail) {\n      return res.status(400).send(\"Email already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n\n  // Forgot password - send reset token (simplified version)\n  app.post(\"/api/forgot-password\", async (req, res) => {\n    const { email } = req.body;\n    const user = await storage.getUserByEmail(email);\n\n    if (!user) {\n      return res.status(404).send(\"User not found\");\n    }\n\n    // In a real app, you'd send an email with a reset token\n    // For now, just return success\n    res\n      .status(200)\n      .json({ message: \"Password reset instructions sent to your email\" });\n  });\n}\n\nexport { hashPassword, comparePasswords };\n","size_bytes":4282},"client/src/pages/Notifications.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Check, Trash2, Package, AlertCircle, Info, CheckCircle } from \"lucide-react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\n\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  type: \"info\" | \"success\" | \"warning\" | \"error\";\n  read: boolean;\n  created_at: string;\n}\n\nexport default function Notifications() {\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (id: string) =>\n      apiRequest(\"PATCH\", `/api/notifications/${id}/read`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const deleteNotificationMutation = useMutation({\n    mutationFn: async (id: string) =>\n      apiRequest(\"DELETE\", `/api/notifications/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () =>\n      apiRequest(\"PATCH\", \"/api/notifications/mark-all-read\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case \"warning\":\n        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n      case \"error\":\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <Info className=\"h-5 w-5 text-blue-500\" />;\n    }\n  };\n\n  const getNotificationBadge = (type: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      success: \"default\",\n      warning: \"secondary\",\n      error: \"destructive\",\n      info: \"outline\",\n    };\n\n    return (\n      <Badge variant={variants[type] || \"outline\"}>\n        {type}\n      </Badge>\n    );\n  };\n\n  const unreadCount = notifications.filter((n) => !n.read).length;\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"notifications-page\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Bell className=\"h-8 w-8\" />\n            Notifications\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            {unreadCount > 0\n              ? `You have ${unreadCount} unread notification${unreadCount > 1 ? \"s\" : \"\"}`\n              : \"You're all caught up!\"}\n          </p>\n        </div>\n        {unreadCount > 0 && (\n          <Button\n            onClick={() => markAllAsReadMutation.mutate()}\n            disabled={markAllAsReadMutation.isPending}\n            data-testid=\"button-mark-all-read\"\n          >\n            <Check className=\"h-4 w-4 mr-2\" />\n            Mark all as read\n          </Button>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>All Notifications</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              Loading notifications...\n            </div>\n          ) : notifications.length > 0 ? (\n            <div className=\"space-y-3\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className={`flex items-start gap-4 p-4 rounded-lg border transition-colors ${\n                    !notification.read\n                      ? \"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\"\n                      : \"hover:bg-muted\"\n                  }`}\n                  data-testid={`notification-${notification.id}`}\n                >\n                  <div className=\"mt-1\">{getNotificationIcon(notification.type)}</div>\n                  <div className=\"flex-1 space-y-1\">\n                    <div className=\"flex items-start justify-between gap-2\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-semibold\">{notification.title}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {notification.message}\n                        </p>\n                      </div>\n                      {getNotificationBadge(notification.type)}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {format(new Date(notification.created_at), \"PPp\")}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    {!notification.read && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => markAsReadMutation.mutate(notification.id)}\n                        disabled={markAsReadMutation.isPending}\n                        data-testid={`button-mark-read-${notification.id}`}\n                      >\n                        <Check className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => deleteNotificationMutation.mutate(notification.id)}\n                      disabled={deleteNotificationMutation.isPending}\n                      data-testid={`button-delete-${notification.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Bell className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No notifications yet</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6327},"client/src/pages/Checkout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { ShoppingCart, CreditCard, Truck, Package } from \"lucide-react\";\nimport type { Product } from \"@shared/schema\";\n\nconst orderFormSchema = z.object({\n  // Contact Information\n  customer_name: z.string().min(2, \"Name is required\"),\n  customer_email: z.string().email(\"Valid email required\"),\n  customer_phone: z.string().min(10, \"Valid phone number required\"),\n  \n  // Shipping Address\n  shipping_address: z.string().min(5, \"Shipping address is required\"),\n  shipping_city: z.string().min(2, \"City is required\"),\n  shipping_state: z.string().min(2, \"State is required\"),\n  shipping_zip: z.string().min(5, \"ZIP code is required\"),\n  shipping_country: z.string().min(2, \"Country is required\"),\n  \n  // Billing Address\n  same_as_shipping: z.boolean().default(true),\n  billing_address: z.string().optional(),\n  billing_city: z.string().optional(),\n  billing_state: z.string().optional(),\n  billing_zip: z.string().optional(),\n  billing_country: z.string().optional(),\n  \n  // Payment Information\n  payment_method: z.enum([\"bank_transfer\", \"cashapp\", \"venmo\", \"western_union\"]),\n  payment_amount: z.string().optional(),\n  payment_transfer_id: z.string().optional(),\n  payment_transfer_date: z.string().optional(),\n  \n  // Additional notes\n  notes: z.string().optional(),\n});\n\ntype OrderFormData = z.infer<typeof orderFormSchema>;\n\nexport default function Checkout() {\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [productId, setProductId] = useState<string | null>(null);\n  const [sameAsShipping, setSameAsShipping] = useState(true);\n\n  // Get product ID from URL query\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const id = params.get(\"product\") || params.get(\"product_id\");\n    if (id) {\n      setProductId(id);\n    } else {\n      toast({\n        title: \"No Product Selected\",\n        description: \"Please select a product to checkout\",\n        variant: \"destructive\",\n      });\n      navigate(\"/\");\n    }\n  }, [toast, navigate]);\n\n  // Fetch product details\n  const { data: product, isLoading: isProductLoading } = useQuery<Product>({\n    queryKey: [\"/api/products\", productId],\n    queryFn: async () => {\n      if (!productId) return null;\n      const response = await fetch(`/api/products/${productId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch product\");\n      return response.json();\n    },\n    enabled: !!productId,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (user === null) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please login to place an order\",\n      });\n      const params = new URLSearchParams(window.location.search);\n      const paramName = params.get(\"product_id\") ? \"product_id\" : \"product\";\n      navigate(`/auth?${paramName}=${productId}`);\n    }\n  }, [user, navigate, productId, toast]);\n\n  const form = useForm<OrderFormData>({\n    resolver: zodResolver(orderFormSchema),\n    defaultValues: {\n      customer_name: user?.username || \"\",\n      customer_email: user?.email || \"\",\n      customer_phone: \"\",\n      shipping_address: \"\",\n      shipping_city: \"\",\n      shipping_state: \"\",\n      shipping_zip: \"\",\n      shipping_country: \"USA\",\n      same_as_shipping: true,\n      payment_method: \"bank_transfer\",\n      notes: \"\",\n    },\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (data: OrderFormData) => {\n      const orderData = {\n        product_id: productId,\n        quantity: 1,\n        total_amount: product?.price || \"0\",\n        payment_method: data.payment_method,\n        payment_amount: data.payment_amount,\n        payment_transfer_id: data.payment_transfer_id,\n        payment_transfer_date: data.payment_transfer_date,\n        customer_info: {\n          name: data.customer_name,\n          email: data.customer_email,\n          phone: data.customer_phone,\n          shipping_address: {\n            address: data.shipping_address,\n            city: data.shipping_city,\n            state: data.shipping_state,\n            zip: data.shipping_zip,\n            country: data.shipping_country,\n          },\n          billing_address: data.same_as_shipping\n            ? {\n                address: data.shipping_address,\n                city: data.shipping_city,\n                state: data.shipping_state,\n                zip: data.shipping_zip,\n                country: data.shipping_country,\n              }\n            : {\n                address: data.billing_address,\n                city: data.billing_city,\n                state: data.billing_state,\n                zip: data.billing_zip,\n                country: data.billing_country,\n              },\n          notes: data.notes,\n        },\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/checkout\", orderData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Order Placed Successfully\",\n        description: \"Your order has been placed. You can add payment details later if needed.\",\n      });\n      navigate(\"/orders\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Order Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: OrderFormData) => {\n    createOrderMutation.mutate(data);\n  };\n\n  if (isProductLoading || !product) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <Package className=\"mx-auto h-12 w-12 text-muted-foreground animate-pulse\" />\n            <p className=\"mt-4 text-muted-foreground\">Loading product details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 max-w-6xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Checkout</h1>\n        <p className=\"text-muted-foreground\">Complete your order details below</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Order Form */}\n        <div className=\"lg:col-span-2\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Contact Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <ShoppingCart className=\"h-5 w-5\" />\n                    Contact Information\n                  </CardTitle>\n                  <CardDescription>How should we contact you about your order?</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"customer_name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"John Doe\" {...field} data-testid=\"input-customer-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"customer_email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-customer-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"customer_phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input type=\"tel\" placeholder=\"+1 (555) 123-4567\" {...field} data-testid=\"input-customer-phone\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Shipping Address */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Truck className=\"h-5 w-5\" />\n                    Shipping Address\n                  </CardTitle>\n                  <CardDescription>Where should we deliver your order?</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"shipping_address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Street Address</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"123 Main St, Apt 4B\" {...field} data-testid=\"input-shipping-address\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"shipping_city\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>City</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"New York\" {...field} data-testid=\"input-shipping-city\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"shipping_state\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>State</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"NY\" {...field} data-testid=\"input-shipping-state\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"shipping_zip\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>ZIP Code</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"10001\" {...field} data-testid=\"input-shipping-zip\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"shipping_country\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Country</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"USA\" {...field} data-testid=\"input-shipping-country\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Billing Address */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Billing Address</CardTitle>\n                  <CardDescription>Where should we send the invoice?</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"same_as_shipping\"\n                      checked={sameAsShipping}\n                      onChange={(e) => {\n                        setSameAsShipping(e.target.checked);\n                        form.setValue(\"same_as_shipping\", e.target.checked);\n                      }}\n                      className=\"h-4 w-4 rounded border-gray-300\"\n                      data-testid=\"checkbox-same-as-shipping\"\n                    />\n                    <Label htmlFor=\"same_as_shipping\" className=\"text-sm font-normal cursor-pointer\">\n                      Same as shipping address\n                    </Label>\n                  </div>\n\n                  {!sameAsShipping && (\n                    <>\n                      <FormField\n                        control={form.control}\n                        name=\"billing_address\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Street Address</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"123 Main St, Apt 4B\" {...field} data-testid=\"input-billing-address\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"billing_city\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>City</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"New York\" {...field} data-testid=\"input-billing-city\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"billing_state\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>State</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"NY\" {...field} data-testid=\"input-billing-state\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"billing_zip\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>ZIP Code</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"10001\" {...field} data-testid=\"input-billing-zip\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"billing_country\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Country</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"USA\" {...field} data-testid=\"input-billing-country\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Payment Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CreditCard className=\"h-5 w-5\" />\n                    Payment Information\n                  </CardTitle>\n                  <CardDescription>\n                    Select your payment method and provide transfer details (optional - can be added later)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"payment_method\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Payment Method</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value} data-testid=\"select-payment-method\">\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select payment method\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                            <SelectItem value=\"cashapp\">CashApp</SelectItem>\n                            <SelectItem value=\"venmo\">Venmo</SelectItem>\n                            <SelectItem value=\"western_union\">Western Union</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"payment_amount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Payment Amount (Optional)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder={`${product?.price || \"0.00\"}`}\n                            {...field}\n                            data-testid=\"input-payment-amount\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"payment_transfer_id\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Transfer ID / Proof (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Transaction reference number\" {...field} data-testid=\"input-payment-transfer-id\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"payment_transfer_date\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Transfer Date (Optional)</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-payment-transfer-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Additional Notes */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Additional Notes</CardTitle>\n                  <CardDescription>Any special instructions or comments?</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Enter any special delivery instructions or notes...\"\n                            className=\"min-h-[100px]\"\n                            {...field}\n                            data-testid=\"input-order-notes\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n\n              <div className=\"flex gap-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => navigate(\"/\")} data-testid=\"button-cancel-order\">\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1\"\n                  disabled={createOrderMutation.isPending}\n                  data-testid=\"button-place-order\"\n                >\n                  {createOrderMutation.isPending ? \"Placing Order...\" : \"Place Order\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </div>\n\n        {/* Order Summary */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"sticky top-4\">\n            <CardHeader>\n              <CardTitle>Order Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-4\">\n                {product.image ? (\n                  <img src={product.image} alt={product.name} className=\"w-20 h-20 object-cover rounded-lg\" />\n                ) : (\n                  <div className=\"w-20 h-20 bg-muted rounded-lg flex items-center justify-center\">\n                    <Package className=\"h-8 w-8 text-muted-foreground\" />\n                  </div>\n                )}\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold line-clamp-2\">{product.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{product.category}</p>\n                </div>\n              </div>\n\n              <div className=\"border-t pt-4 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Quantity</span>\n                  <span>1</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Price</span>\n                  <span>${parseFloat(product.price).toFixed(2)}</span>\n                </div>\n                <div className=\"border-t pt-2 flex justify-between font-semibold\">\n                  <span>Total</span>\n                  <span>${parseFloat(product.price).toFixed(2)}</span>\n                </div>\n              </div>\n\n              <div className=\"bg-blue-50 dark:bg-blue-950 p-3 rounded-lg\">\n                <p className=\"text-xs text-blue-900 dark:text-blue-100\">\n                  💡 You can place the order now and add payment transfer details later from your orders page.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":25147}},"version":1}